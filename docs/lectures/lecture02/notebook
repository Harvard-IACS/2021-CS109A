{
    "metadata": {
        "kernelspec": {
            "name": "python3",
            "display_name": "Python 3 (ipykernel)",
            "language": "python"
        }
    },
    "nbformat": 4,
    "nbformat_minor": 4,
    "cells": [
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# \u003cimg style=\"float: left; padding-right: 10px; width: 45px\" src=\"https://raw.githubusercontent.com/Harvard-IACS/2018-CS109A/master/content/styles/iacs.png\"\u003e CS109a Introduction to PANDAS\n",
                "\n",
                "## Lecture 1, Pandas Intro\n",
                "\n",
                "\n",
                "**Harvard University**\u003cbr/\u003e\n",
                "**Fall 2021**\u003cbr/\u003e\n",
                "**Instructors**: Pavlos Protopapas and Natesh Pillai\n",
                "\n",
                "---"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# Pandas\n",
                "\n",
                "`PANDAS` is Python library that contains highly useful data structures, including DataFrames, which makes Exploratory Data Analysis (EDA) easy. Here we will see some of the elementary functions in practice."
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Installing\n",
                "**Using conda**\n",
                "\n",
                "```shell\n",
                "conda install pandas\n",
                "```\n",
                "\n",
                "**Using pip**\n",
                "```shell\n",
                "pip install pandas\n",
                "```\n",
                "**TIP: You can try installing a library from a jupyter notebook cell adding \"!\"**\n",
                "```shell\n",
                "# using conda\n",
                "!conda install pandas\n",
                "# or using pip\n",
                "!pip install pandas\n",
                "```"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# PANDAS Basics\n",
                "Let's get started with basic functionality of PANDAS!"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Importing pandas\n",
                "\n",
                "importing pandas is as simple as next line\n",
                "```python\n",
                "import pandas\n",
                "```\n",
                "But ~~because of lazyness~~ for convenience we usually import it as `pd`"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 4,
            "metadata": {},
            "outputs": [],
            "source": [
                "import pandas as pd"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "You can always check for the version of almost any library using `__version__`"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 5,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "'1.3.2'"
                    },
                    "execution_count": 5,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "pd.__version__"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Pandas data structures\n",
                "\n",
                "The main data structures in pandas are the `Series` (useful for time series) and the `DataFrame`.  \n",
                "\n",
                "- **Series**\n",
                "  - Formal: One-dimensional ndarray with axis labels (including time series).\n",
                "  - Roughly: You can think of it as kind of spreadsheet column or a relational database table of one column  \n",
                "  \n",
                " \n",
                "- **DataFrame**\n",
                "  - Formal: Two-dimensional, size-mutable, potentially heterogeneous tabular data.\n",
                "  - Roughly: to a relational database table. Where every *DataFrame's* column is a *Series*.\n",
                "\n",
                "Both DataFrames and Series always have an *index*."
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## pd.Series\n",
                "```\n",
                "pd.Series(data=None, index=None, dtype=None, name=None, copy=False)\n",
                "```\n",
                "When not using an index pandas will add an index for us:\n",
                "```python\n",
                "\u003e\u003e\u003e s1 = pd.Series(range(0, 50, 10))\n",
                "0     0\n",
                "1    10\n",
                "2    20\n",
                "3    30\n",
                "4    40\n",
                "dtype: int64\n",
                "```"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "**The data can be strings not just numbers**\n",
                "\n",
                "The index can be anything, but the data and index should have the same length."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 6,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "10    A\n9     B\n8     C\n7     D\n6     E\ndtype: object"
                    },
                    "execution_count": 6,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "s = pd.Series(data=['A', 'B', 'C', 'D', 'E'], index=range(10, 5, -1))\n",
                "s"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "**We can independently access the series' values or its index**"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 7,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "array(['A', 'B', 'C', 'D', 'E'], dtype=object)"
                    },
                    "execution_count": 7,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "s.values"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 8,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "RangeIndex(start=10, stop=5, step=-1)"
                    },
                    "execution_count": 8,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "s.index"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## pd.DataFrame\n",
                "```\n",
                "pd.DataFrame(data=None, index=None, columns=None, dtype=None, copy=None)\n",
                "```\n",
                "This data structure also contains labeled axes (rows and columns).\n",
                "\n",
                "|index|First Name|Last Name|\n",
                "|---|---|---|\n",
                "|0|Ann|Gatton|\n",
                "|1|John|Fosa|\n",
                "|2|Zack|Kaufman|\n",
                "\n",
                "DataFrame class offers powerful ways to create them. For instance the two code lines belows generate the same DataFrame object.\n",
                "```python\n",
                "# using rows\n",
                "pd.DataFrame(data=[[1,2], [3,4], [5,6]], columns=['A','B'])\n",
                "```\n",
                "```python\n",
                "# using columns\n",
                "pd.DataFrame(data={'A':[1,3,5], 'B': [2,4,6]})\n",
                "```\n",
                "||A|B|\n",
                "|-|-|-|\n",
                "|0|1|2|\n",
                "|1|3|4|\n",
                "|2|5|6|"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Loading data\n",
                "\n",
                "It's common to create DataFrames, but usually we read data from external sources. This is easy to do in Pandas.\n",
                ""
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 9,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "read_clipboard\thttps://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_clipboard.html\nread_csv\thttps://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html\nread_excel\thttps://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_excel.html\nread_feather\thttps://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_feather.html\nread_fwf\thttps://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_fwf.html\nread_gbq\thttps://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_gbq.html\nread_hdf\thttps://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_hdf.html\nread_html\thttps://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_html.html\nread_json\thttps://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_json.html\nread_parquet\thttps://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_parquet.html\nread_pickle\thttps://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_pickle.html\nread_spss\thttps://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_spss.html\nread_sql\thttps://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_sql.html\nread_sql_query\thttps://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_sql_query.html\nread_sql_table\thttps://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_sql_table.html\nread_stata\thttps://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_stata.html\nread_table\thttps://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_table.html\nread_xml\thttps://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_xml.html\n"
                }
            ],
            "source": [
                "tpl = 'https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.{}.html'\n",
                "\n",
                "for m in ['clipboard', 'csv', 'excel', 'feather', 'fwf', 'gbq',\n",
                "          'hdf', 'html', 'json', 'parquet', 'pickle', 'spss',\n",
                "          'sql', 'sql_query', 'sql_table', 'stata', 'table', 'xml']:\n",
                "\n",
                "    method = f'read_{m}'\n",
                "    url =  tpl.format(method)\n",
                "    print(f'{method}\\t{url}')"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "**Example**  \n",
                "The method `read_html` is powerful and requires a bit of expirience.\n",
                "- The first line processes the url and extracts html that match the criteria into a DataFrames \n",
                "- The header will come as first row of the DataFrame, so in line 2 we use the first row values as columns names for the dataframe and finally we remove the first row."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 10,
            "metadata": {},
            "outputs": [],
            "source": [
                "df = pd.read_html('https://en.wikipedia.org/wiki/Harvard_University', match='School')[0]"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 11,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "\u003cdiv\u003e\n\u003cstyle scoped\u003e\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\u003c/style\u003e\n\u003ctable border=\"1\" class=\"dataframe\"\u003e\n  \u003cthead\u003e\n    \u003ctr style=\"text-align: right;\"\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e0\u003c/th\u003e\n      \u003cth\u003e1\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003cth\u003e0\u003c/th\u003e\n      \u003ctd\u003eSchool\u003c/td\u003e\n      \u003ctd\u003eFounded\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e1\u003c/th\u003e\n      \u003ctd\u003eHarvard College\u003c/td\u003e\n      \u003ctd\u003e1636\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e2\u003c/th\u003e\n      \u003ctd\u003eMedicine\u003c/td\u003e\n      \u003ctd\u003e1782\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e3\u003c/th\u003e\n      \u003ctd\u003eDivinity\u003c/td\u003e\n      \u003ctd\u003e1816\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e4\u003c/th\u003e\n      \u003ctd\u003eLaw\u003c/td\u003e\n      \u003ctd\u003e1817\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e5\u003c/th\u003e\n      \u003ctd\u003eDental Medicine\u003c/td\u003e\n      \u003ctd\u003e1867\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e6\u003c/th\u003e\n      \u003ctd\u003eArts and Sciences\u003c/td\u003e\n      \u003ctd\u003e1872\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e7\u003c/th\u003e\n      \u003ctd\u003eBusiness\u003c/td\u003e\n      \u003ctd\u003e1908\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e8\u003c/th\u003e\n      \u003ctd\u003eExtension\u003c/td\u003e\n      \u003ctd\u003e1910\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e9\u003c/th\u003e\n      \u003ctd\u003eDesign\u003c/td\u003e\n      \u003ctd\u003e1914\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e10\u003c/th\u003e\n      \u003ctd\u003eEducation\u003c/td\u003e\n      \u003ctd\u003e1920\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e11\u003c/th\u003e\n      \u003ctd\u003ePublic Health\u003c/td\u003e\n      \u003ctd\u003e1922\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e12\u003c/th\u003e\n      \u003ctd\u003eGovernment\u003c/td\u003e\n      \u003ctd\u003e1936\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e13\u003c/th\u003e\n      \u003ctd\u003eEngineering and Applied Sciences\u003c/td\u003e\n      \u003ctd\u003e2007\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e",
                        "text/plain": "                                   0        1\n0                             School  Founded\n1                    Harvard College     1636\n2                           Medicine     1782\n3                           Divinity     1816\n4                                Law     1817\n5                    Dental Medicine     1867\n6                  Arts and Sciences     1872\n7                           Business     1908\n8                          Extension     1910\n9                             Design     1914\n10                         Education     1920\n11                     Public Health     1922\n12                        Government     1936\n13  Engineering and Applied Sciences     2007"
                    },
                    "execution_count": 11,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 15,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": [
                            "\u003cdiv\u003e\n",
                            "\u003cstyle scoped\u003e\n",
                            "    .dataframe tbody tr th:only-of-type {\n",
                            "        vertical-align: middle;\n",
                            "    }\n",
                            "\n",
                            "    .dataframe tbody tr th {\n",
                            "        vertical-align: top;\n",
                            "    }\n",
                            "\n",
                            "    .dataframe thead th {\n",
                            "        text-align: right;\n",
                            "    }\n",
                            "\u003c/style\u003e\n",
                            "\u003ctable border=\"1\" class=\"dataframe\"\u003e\n",
                            "  \u003cthead\u003e\n",
                            "    \u003ctr style=\"text-align: right;\"\u003e\n",
                            "      \u003cth\u003e\u003c/th\u003e\n",
                            "      \u003cth\u003eSchool\u003c/th\u003e\n",
                            "      \u003cth\u003eFounded\u003c/th\u003e\n",
                            "    \u003c/tr\u003e\n",
                            "  \u003c/thead\u003e\n",
                            "  \u003ctbody\u003e\n",
                            "    \u003ctr\u003e\n",
                            "      \u003cth\u003e1\u003c/th\u003e\n",
                            "      \u003ctd\u003eHarvard College\u003c/td\u003e\n",
                            "      \u003ctd\u003e1636\u003c/td\u003e\n",
                            "    \u003c/tr\u003e\n",
                            "    \u003ctr\u003e\n",
                            "      \u003cth\u003e2\u003c/th\u003e\n",
                            "      \u003ctd\u003eMedicine\u003c/td\u003e\n",
                            "      \u003ctd\u003e1782\u003c/td\u003e\n",
                            "    \u003c/tr\u003e\n",
                            "    \u003ctr\u003e\n",
                            "      \u003cth\u003e3\u003c/th\u003e\n",
                            "      \u003ctd\u003eDivinity\u003c/td\u003e\n",
                            "      \u003ctd\u003e1816\u003c/td\u003e\n",
                            "    \u003c/tr\u003e\n",
                            "    \u003ctr\u003e\n",
                            "      \u003cth\u003e4\u003c/th\u003e\n",
                            "      \u003ctd\u003eLaw\u003c/td\u003e\n",
                            "      \u003ctd\u003e1817\u003c/td\u003e\n",
                            "    \u003c/tr\u003e\n",
                            "    \u003ctr\u003e\n",
                            "      \u003cth\u003e5\u003c/th\u003e\n",
                            "      \u003ctd\u003eDental Medicine\u003c/td\u003e\n",
                            "      \u003ctd\u003e1867\u003c/td\u003e\n",
                            "    \u003c/tr\u003e\n",
                            "    \u003ctr\u003e\n",
                            "      \u003cth\u003e6\u003c/th\u003e\n",
                            "      \u003ctd\u003eArts and Sciences\u003c/td\u003e\n",
                            "      \u003ctd\u003e1872\u003c/td\u003e\n",
                            "    \u003c/tr\u003e\n",
                            "    \u003ctr\u003e\n",
                            "      \u003cth\u003e7\u003c/th\u003e\n",
                            "      \u003ctd\u003eBusiness\u003c/td\u003e\n",
                            "      \u003ctd\u003e1908\u003c/td\u003e\n",
                            "    \u003c/tr\u003e\n",
                            "    \u003ctr\u003e\n",
                            "      \u003cth\u003e8\u003c/th\u003e\n",
                            "      \u003ctd\u003eExtension\u003c/td\u003e\n",
                            "      \u003ctd\u003e1910\u003c/td\u003e\n",
                            "    \u003c/tr\u003e\n",
                            "    \u003ctr\u003e\n",
                            "      \u003cth\u003e9\u003c/th\u003e\n",
                            "      \u003ctd\u003eDesign\u003c/td\u003e\n",
                            "      \u003ctd\u003e1914\u003c/td\u003e\n",
                            "    \u003c/tr\u003e\n",
                            "    \u003ctr\u003e\n",
                            "      \u003cth\u003e10\u003c/th\u003e\n",
                            "      \u003ctd\u003eEducation\u003c/td\u003e\n",
                            "      \u003ctd\u003e1920\u003c/td\u003e\n",
                            "    \u003c/tr\u003e\n",
                            "    \u003ctr\u003e\n",
                            "      \u003cth\u003e11\u003c/th\u003e\n",
                            "      \u003ctd\u003ePublic Health\u003c/td\u003e\n",
                            "      \u003ctd\u003e1922\u003c/td\u003e\n",
                            "    \u003c/tr\u003e\n",
                            "    \u003ctr\u003e\n",
                            "      \u003cth\u003e12\u003c/th\u003e\n",
                            "      \u003ctd\u003eGovernment\u003c/td\u003e\n",
                            "      \u003ctd\u003e1936\u003c/td\u003e\n",
                            "    \u003c/tr\u003e\n",
                            "    \u003ctr\u003e\n",
                            "      \u003cth\u003e13\u003c/th\u003e\n",
                            "      \u003ctd\u003eEngineering and Applied Sciences\u003c/td\u003e\n",
                            "      \u003ctd\u003e2007\u003c/td\u003e\n",
                            "    \u003c/tr\u003e\n",
                            "  \u003c/tbody\u003e\n",
                            "\u003c/table\u003e\n",
                            "\u003c/div\u003e"
                        ],
                        "text/plain": [
                            "                              School Founded\n",
                            "1                    Harvard College    1636\n",
                            "2                           Medicine    1782\n",
                            "3                           Divinity    1816\n",
                            "4                                Law    1817\n",
                            "5                    Dental Medicine    1867\n",
                            "6                  Arts and Sciences    1872\n",
                            "7                           Business    1908\n",
                            "8                          Extension    1910\n",
                            "9                             Design    1914\n",
                            "10                         Education    1920\n",
                            "11                     Public Health    1922\n",
                            "12                        Government    1936\n",
                            "13  Engineering and Applied Sciences    2007"
                        ]
                    },
                    "execution_count": 15,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df = pd.read_html('https://en.wikipedia.org/wiki/Harvard_University', match='School')[0]\n",
                "df = df.rename(columns=df.iloc[0])[1:]\n",
                "df"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## pd.read_csv\n",
                "\n",
                " [`read_csv`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html) is the recommended starting point for anyone learning pandas. You can read its docs [here](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html).\n",
                "\n",
                "\n",
                "### Let's use it to load [Avocado prices](https://www.kaggle.com/neuromusic/avocado-prices)\n",
                "\n",
                "*It is a well known fact that Millenials LOVE Avocado Toast. It's also a well known fact that all Millenials live in their parents basements.*\n",
                "\n",
                "*Clearly, they aren't buying home because they are buying too much Avocado Toast!*\n",
                "\n",
                "*But maybe there's hope… if a Millenial could find a city with cheap avocados, they could live out the Millenial American Dream.*"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "The table below represents weekly 2018 retail scan data for National retail volume (units) and price. Retail scan data comes directly from retailers’ cash registers based on actual retail sales of Hass avocados. Starting in 2013, the table below reflects an expanded, multi-outlet retail data set. Multi-outlet reporting includes an aggregation of the following channels: grocery, mass, club, drug, dollar and military. The Average Price (of avocados) in the table reflects a per unit (per avocado) cost, even when multiple units (avocados) are sold in bags. The Product Lookup codes (PLU’s) in the table are only for Hass avocados. Other varieties of avocados (e.g. greenskins) are not included in this table.\n",
                "\n",
                "**Some relevant columns in the dataset:**\n",
                "\n",
                "- **Date**: The date of the observation\n",
                "- **AveragePrice**: the average price of a single avocado\n",
                "- **type**: conventional or organic\n",
                "- **year**: the year\n",
                "- **Region**: the city or region of the observation\n",
                "- **Total Volume**: Total number of avocados sold\n",
                "- **4046**: Total number of avocados with PLU 4046 sold\n",
                "- **4225**: Total number of avocados with PLU 4225 sold\n",
                "- **4770**: Total number of avocados with PLU 4770 sold"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "### Load dataset\n",
                "Read a compressed csv file. We ask pandas to use first csv column as index to avoid creating a new one by default.\n",
                "\n",
                "**TIP**: when you are blind about what you are loading or you already know it is a big dataset you can fix the number of rows to be loaded using the parameter `nrows` (`nrows=None` to load all and it's the default value)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 12,
            "metadata": {},
            "outputs": [],
            "source": [
                "df = pd.read_csv('avocado.csv.zip', index_col=0, compression='zip', nrows=None)"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "### Roughly exploring the data"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "We can quickly see the dataframe's dimension"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 13,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "(18249, 13)"
                    },
                    "execution_count": 13,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df.shape"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "The shape is a tuple with the number of rows and the number of columns"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 14,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "(18249, 13)"
                    },
                    "execution_count": 14,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "len(df.index), len(df.columns)"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Show only the columns' names"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 15,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "Index(['Date', 'AveragePrice', 'Total Volume', '4046', '4225', '4770',\n       'Total Bags', 'Small Bags', 'Large Bags', 'XLarge Bags', 'type', 'year',\n       'region'],\n      dtype='object')"
                    },
                    "execution_count": 15,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df.columns"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "The columns attribute is not a python list."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 16,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "True"
                    },
                    "execution_count": 16,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "type(df.columns) == pd.Index"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Show only the index"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 17,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "Int64Index([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,\n            ...\n             2,  3,  4,  5,  6,  7,  8,  9, 10, 11],\n           dtype='int64', length=18249)"
                    },
                    "execution_count": 17,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df.index"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Sometimes some column type is incorrect and possible ways to detect it is using `df.info()` or `df.dtypes`."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 20,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "Date             object\nAveragePrice    float64\nTotal Volume    float64\n4046            float64\n4225            float64\n4770            float64\nTotal Bags      float64\nSmall Bags      float64\nLarge Bags      float64\nXLarge Bags     float64\ntype             object\nyear              int64\nregion           object\ndtype: object"
                    },
                    "execution_count": 20,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df.dtypes"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "In example, here `Date` is an object (the way pandas save strings). We can use a better column type for that."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 21,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "Date            datetime64[ns]\nAveragePrice           float64\nTotal Volume           float64\n4046                   float64\n4225                   float64\n4770                   float64\nTotal Bags             float64\nSmall Bags             float64\nLarge Bags             float64\nXLarge Bags            float64\ntype                    object\nyear                     int64\nregion                  object\ndtype: object"
                    },
                    "execution_count": 21,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df['Date'] = pd.to_datetime(df['Date'])\n",
                "df.dtypes"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "show first (by default: 5) rows"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 22,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "\u003cdiv\u003e\n\u003cstyle scoped\u003e\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\u003c/style\u003e\n\u003ctable border=\"1\" class=\"dataframe\"\u003e\n  \u003cthead\u003e\n    \u003ctr style=\"text-align: right;\"\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003eDate\u003c/th\u003e\n      \u003cth\u003eAveragePrice\u003c/th\u003e\n      \u003cth\u003eTotal Volume\u003c/th\u003e\n      \u003cth\u003e4046\u003c/th\u003e\n      \u003cth\u003e4225\u003c/th\u003e\n      \u003cth\u003e4770\u003c/th\u003e\n      \u003cth\u003eTotal Bags\u003c/th\u003e\n      \u003cth\u003eSmall Bags\u003c/th\u003e\n      \u003cth\u003eLarge Bags\u003c/th\u003e\n      \u003cth\u003eXLarge Bags\u003c/th\u003e\n      \u003cth\u003etype\u003c/th\u003e\n      \u003cth\u003eyear\u003c/th\u003e\n      \u003cth\u003eregion\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003cth\u003e0\u003c/th\u003e\n      \u003ctd\u003e2015-12-27\u003c/td\u003e\n      \u003ctd\u003e1.33\u003c/td\u003e\n      \u003ctd\u003e64236.62\u003c/td\u003e\n      \u003ctd\u003e1036.74\u003c/td\u003e\n      \u003ctd\u003e54454.85\u003c/td\u003e\n      \u003ctd\u003e48.16\u003c/td\u003e\n      \u003ctd\u003e8696.87\u003c/td\u003e\n      \u003ctd\u003e8603.62\u003c/td\u003e\n      \u003ctd\u003e93.25\u003c/td\u003e\n      \u003ctd\u003e0.0\u003c/td\u003e\n      \u003ctd\u003econventional\u003c/td\u003e\n      \u003ctd\u003e2015\u003c/td\u003e\n      \u003ctd\u003eAlbany\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e1\u003c/th\u003e\n      \u003ctd\u003e2015-12-20\u003c/td\u003e\n      \u003ctd\u003e1.35\u003c/td\u003e\n      \u003ctd\u003e54876.98\u003c/td\u003e\n      \u003ctd\u003e674.28\u003c/td\u003e\n      \u003ctd\u003e44638.81\u003c/td\u003e\n      \u003ctd\u003e58.33\u003c/td\u003e\n      \u003ctd\u003e9505.56\u003c/td\u003e\n      \u003ctd\u003e9408.07\u003c/td\u003e\n      \u003ctd\u003e97.49\u003c/td\u003e\n      \u003ctd\u003e0.0\u003c/td\u003e\n      \u003ctd\u003econventional\u003c/td\u003e\n      \u003ctd\u003e2015\u003c/td\u003e\n      \u003ctd\u003eAlbany\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e2\u003c/th\u003e\n      \u003ctd\u003e2015-12-13\u003c/td\u003e\n      \u003ctd\u003e0.93\u003c/td\u003e\n      \u003ctd\u003e118220.22\u003c/td\u003e\n      \u003ctd\u003e794.70\u003c/td\u003e\n      \u003ctd\u003e109149.67\u003c/td\u003e\n      \u003ctd\u003e130.50\u003c/td\u003e\n      \u003ctd\u003e8145.35\u003c/td\u003e\n      \u003ctd\u003e8042.21\u003c/td\u003e\n      \u003ctd\u003e103.14\u003c/td\u003e\n      \u003ctd\u003e0.0\u003c/td\u003e\n      \u003ctd\u003econventional\u003c/td\u003e\n      \u003ctd\u003e2015\u003c/td\u003e\n      \u003ctd\u003eAlbany\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e3\u003c/th\u003e\n      \u003ctd\u003e2015-12-06\u003c/td\u003e\n      \u003ctd\u003e1.08\u003c/td\u003e\n      \u003ctd\u003e78992.15\u003c/td\u003e\n      \u003ctd\u003e1132.00\u003c/td\u003e\n      \u003ctd\u003e71976.41\u003c/td\u003e\n      \u003ctd\u003e72.58\u003c/td\u003e\n      \u003ctd\u003e5811.16\u003c/td\u003e\n      \u003ctd\u003e5677.40\u003c/td\u003e\n      \u003ctd\u003e133.76\u003c/td\u003e\n      \u003ctd\u003e0.0\u003c/td\u003e\n      \u003ctd\u003econventional\u003c/td\u003e\n      \u003ctd\u003e2015\u003c/td\u003e\n      \u003ctd\u003eAlbany\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e4\u003c/th\u003e\n      \u003ctd\u003e2015-11-29\u003c/td\u003e\n      \u003ctd\u003e1.28\u003c/td\u003e\n      \u003ctd\u003e51039.60\u003c/td\u003e\n      \u003ctd\u003e941.48\u003c/td\u003e\n      \u003ctd\u003e43838.39\u003c/td\u003e\n      \u003ctd\u003e75.78\u003c/td\u003e\n      \u003ctd\u003e6183.95\u003c/td\u003e\n      \u003ctd\u003e5986.26\u003c/td\u003e\n      \u003ctd\u003e197.69\u003c/td\u003e\n      \u003ctd\u003e0.0\u003c/td\u003e\n      \u003ctd\u003econventional\u003c/td\u003e\n      \u003ctd\u003e2015\u003c/td\u003e\n      \u003ctd\u003eAlbany\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e",
                        "text/plain": "        Date  AveragePrice  Total Volume     4046       4225    4770  \\\n0 2015-12-27          1.33      64236.62  1036.74   54454.85   48.16   \n1 2015-12-20          1.35      54876.98   674.28   44638.81   58.33   \n2 2015-12-13          0.93     118220.22   794.70  109149.67  130.50   \n3 2015-12-06          1.08      78992.15  1132.00   71976.41   72.58   \n4 2015-11-29          1.28      51039.60   941.48   43838.39   75.78   \n\n   Total Bags  Small Bags  Large Bags  XLarge Bags          type  year  region  \n0     8696.87     8603.62       93.25          0.0  conventional  2015  Albany  \n1     9505.56     9408.07       97.49          0.0  conventional  2015  Albany  \n2     8145.35     8042.21      103.14          0.0  conventional  2015  Albany  \n3     5811.16     5677.40      133.76          0.0  conventional  2015  Albany  \n4     6183.95     5986.26      197.69          0.0  conventional  2015  Albany  "
                    },
                    "execution_count": 22,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df.head()"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "show last 2 rows"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 24,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "\u003cdiv\u003e\n\u003cstyle scoped\u003e\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\u003c/style\u003e\n\u003ctable border=\"1\" class=\"dataframe\"\u003e\n  \u003cthead\u003e\n    \u003ctr style=\"text-align: right;\"\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003eDate\u003c/th\u003e\n      \u003cth\u003eAveragePrice\u003c/th\u003e\n      \u003cth\u003eTotal Volume\u003c/th\u003e\n      \u003cth\u003e4046\u003c/th\u003e\n      \u003cth\u003e4225\u003c/th\u003e\n      \u003cth\u003e4770\u003c/th\u003e\n      \u003cth\u003eTotal Bags\u003c/th\u003e\n      \u003cth\u003eSmall Bags\u003c/th\u003e\n      \u003cth\u003eLarge Bags\u003c/th\u003e\n      \u003cth\u003eXLarge Bags\u003c/th\u003e\n      \u003cth\u003etype\u003c/th\u003e\n      \u003cth\u003eyear\u003c/th\u003e\n      \u003cth\u003eregion\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003cth\u003e10\u003c/th\u003e\n      \u003ctd\u003e2018-01-14\u003c/td\u003e\n      \u003ctd\u003e1.93\u003c/td\u003e\n      \u003ctd\u003e16205.22\u003c/td\u003e\n      \u003ctd\u003e1527.63\u003c/td\u003e\n      \u003ctd\u003e2981.04\u003c/td\u003e\n      \u003ctd\u003e727.01\u003c/td\u003e\n      \u003ctd\u003e10969.54\u003c/td\u003e\n      \u003ctd\u003e10919.54\u003c/td\u003e\n      \u003ctd\u003e50.00\u003c/td\u003e\n      \u003ctd\u003e0.0\u003c/td\u003e\n      \u003ctd\u003eorganic\u003c/td\u003e\n      \u003ctd\u003e2018\u003c/td\u003e\n      \u003ctd\u003eWestTexNewMexico\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e11\u003c/th\u003e\n      \u003ctd\u003e2018-01-07\u003c/td\u003e\n      \u003ctd\u003e1.62\u003c/td\u003e\n      \u003ctd\u003e17489.58\u003c/td\u003e\n      \u003ctd\u003e2894.77\u003c/td\u003e\n      \u003ctd\u003e2356.13\u003c/td\u003e\n      \u003ctd\u003e224.53\u003c/td\u003e\n      \u003ctd\u003e12014.15\u003c/td\u003e\n      \u003ctd\u003e11988.14\u003c/td\u003e\n      \u003ctd\u003e26.01\u003c/td\u003e\n      \u003ctd\u003e0.0\u003c/td\u003e\n      \u003ctd\u003eorganic\u003c/td\u003e\n      \u003ctd\u003e2018\u003c/td\u003e\n      \u003ctd\u003eWestTexNewMexico\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e",
                        "text/plain": "         Date  AveragePrice  Total Volume     4046     4225    4770  \\\n10 2018-01-14          1.93      16205.22  1527.63  2981.04  727.01   \n11 2018-01-07          1.62      17489.58  2894.77  2356.13  224.53   \n\n    Total Bags  Small Bags  Large Bags  XLarge Bags     type  year  \\\n10    10969.54    10919.54       50.00          0.0  organic  2018   \n11    12014.15    11988.14       26.01          0.0  organic  2018   \n\n              region  \n10  WestTexNewMexico  \n11  WestTexNewMexico  "
                    },
                    "execution_count": 24,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df.tail(2)"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "**display some data info**\n",
                "\n",
                "Sometimes the Dataframe method `info()` is a great way to take a first data snapshot with few columns datasets. It displays:\n",
                "- columns names\n",
                "- number of rows (as entries)\n",
                "- number of non null values\n",
                "- data type per column (per Series)\n",
                "- memory usage\n",
                "\n",
                "**TIP**: if you know that the number of columns is high (maybe when printing `df.shape[1]`), then you can pass a `False` flag to the method `info()` to reduce the information just to global information."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 25,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "\u003cclass 'pandas.core.frame.DataFrame'\u003e\nInt64Index: 18249 entries, 0 to 11\nData columns (total 13 columns):\n #   Column        Non-Null Count  Dtype         \n---  ------        --------------  -----         \n 0   Date          18249 non-null  datetime64[ns]\n 1   AveragePrice  18249 non-null  float64       \n 2   Total Volume  18249 non-null  float64       \n 3   4046          18249 non-null  float64       \n 4   4225          18249 non-null  float64       \n 5   4770          18249 non-null  float64       \n 6   Total Bags    18249 non-null  float64       \n 7   Small Bags    18249 non-null  float64       \n 8   Large Bags    18249 non-null  float64       \n 9   XLarge Bags   18249 non-null  float64       \n 10  type          18249 non-null  object        \n 11  year          18249 non-null  int64         \n 12  region        18249 non-null  object        \ndtypes: datetime64[ns](1), float64(9), int64(1), object(2)\nmemory usage: 1.9+ MB\n"
                }
            ],
            "source": [
                "few_columns = True\n",
                "df.info(verbose=few_columns)"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Descriptive statistics\n",
                "\n",
                "We can take a fast look at some data statistics with one line of code"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 26,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "\u003cdiv\u003e\n\u003cstyle scoped\u003e\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\u003c/style\u003e\n\u003ctable border=\"1\" class=\"dataframe\"\u003e\n  \u003cthead\u003e\n    \u003ctr style=\"text-align: right;\"\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003eAveragePrice\u003c/th\u003e\n      \u003cth\u003eTotal Volume\u003c/th\u003e\n      \u003cth\u003e4046\u003c/th\u003e\n      \u003cth\u003e4225\u003c/th\u003e\n      \u003cth\u003e4770\u003c/th\u003e\n      \u003cth\u003eTotal Bags\u003c/th\u003e\n      \u003cth\u003eSmall Bags\u003c/th\u003e\n      \u003cth\u003eLarge Bags\u003c/th\u003e\n      \u003cth\u003eXLarge Bags\u003c/th\u003e\n      \u003cth\u003eyear\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003cth\u003ecount\u003c/th\u003e\n      \u003ctd\u003e18249.000000\u003c/td\u003e\n      \u003ctd\u003e1.824900e+04\u003c/td\u003e\n      \u003ctd\u003e1.824900e+04\u003c/td\u003e\n      \u003ctd\u003e1.824900e+04\u003c/td\u003e\n      \u003ctd\u003e1.824900e+04\u003c/td\u003e\n      \u003ctd\u003e1.824900e+04\u003c/td\u003e\n      \u003ctd\u003e1.824900e+04\u003c/td\u003e\n      \u003ctd\u003e1.824900e+04\u003c/td\u003e\n      \u003ctd\u003e18249.000000\u003c/td\u003e\n      \u003ctd\u003e18249.000000\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003emean\u003c/th\u003e\n      \u003ctd\u003e1.405978\u003c/td\u003e\n      \u003ctd\u003e8.506440e+05\u003c/td\u003e\n      \u003ctd\u003e2.930084e+05\u003c/td\u003e\n      \u003ctd\u003e2.951546e+05\u003c/td\u003e\n      \u003ctd\u003e2.283974e+04\u003c/td\u003e\n      \u003ctd\u003e2.396392e+05\u003c/td\u003e\n      \u003ctd\u003e1.821947e+05\u003c/td\u003e\n      \u003ctd\u003e5.433809e+04\u003c/td\u003e\n      \u003ctd\u003e3106.426507\u003c/td\u003e\n      \u003ctd\u003e2016.147899\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003estd\u003c/th\u003e\n      \u003ctd\u003e0.402677\u003c/td\u003e\n      \u003ctd\u003e3.453545e+06\u003c/td\u003e\n      \u003ctd\u003e1.264989e+06\u003c/td\u003e\n      \u003ctd\u003e1.204120e+06\u003c/td\u003e\n      \u003ctd\u003e1.074641e+05\u003c/td\u003e\n      \u003ctd\u003e9.862424e+05\u003c/td\u003e\n      \u003ctd\u003e7.461785e+05\u003c/td\u003e\n      \u003ctd\u003e2.439660e+05\u003c/td\u003e\n      \u003ctd\u003e17692.894652\u003c/td\u003e\n      \u003ctd\u003e0.939938\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003emin\u003c/th\u003e\n      \u003ctd\u003e0.440000\u003c/td\u003e\n      \u003ctd\u003e8.456000e+01\u003c/td\u003e\n      \u003ctd\u003e0.000000e+00\u003c/td\u003e\n      \u003ctd\u003e0.000000e+00\u003c/td\u003e\n      \u003ctd\u003e0.000000e+00\u003c/td\u003e\n      \u003ctd\u003e0.000000e+00\u003c/td\u003e\n      \u003ctd\u003e0.000000e+00\u003c/td\u003e\n      \u003ctd\u003e0.000000e+00\u003c/td\u003e\n      \u003ctd\u003e0.000000\u003c/td\u003e\n      \u003ctd\u003e2015.000000\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e25%\u003c/th\u003e\n      \u003ctd\u003e1.100000\u003c/td\u003e\n      \u003ctd\u003e1.083858e+04\u003c/td\u003e\n      \u003ctd\u003e8.540700e+02\u003c/td\u003e\n      \u003ctd\u003e3.008780e+03\u003c/td\u003e\n      \u003ctd\u003e0.000000e+00\u003c/td\u003e\n      \u003ctd\u003e5.088640e+03\u003c/td\u003e\n      \u003ctd\u003e2.849420e+03\u003c/td\u003e\n      \u003ctd\u003e1.274700e+02\u003c/td\u003e\n      \u003ctd\u003e0.000000\u003c/td\u003e\n      \u003ctd\u003e2015.000000\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e50%\u003c/th\u003e\n      \u003ctd\u003e1.370000\u003c/td\u003e\n      \u003ctd\u003e1.073768e+05\u003c/td\u003e\n      \u003ctd\u003e8.645300e+03\u003c/td\u003e\n      \u003ctd\u003e2.906102e+04\u003c/td\u003e\n      \u003ctd\u003e1.849900e+02\u003c/td\u003e\n      \u003ctd\u003e3.974383e+04\u003c/td\u003e\n      \u003ctd\u003e2.636282e+04\u003c/td\u003e\n      \u003ctd\u003e2.647710e+03\u003c/td\u003e\n      \u003ctd\u003e0.000000\u003c/td\u003e\n      \u003ctd\u003e2016.000000\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e75%\u003c/th\u003e\n      \u003ctd\u003e1.660000\u003c/td\u003e\n      \u003ctd\u003e4.329623e+05\u003c/td\u003e\n      \u003ctd\u003e1.110202e+05\u003c/td\u003e\n      \u003ctd\u003e1.502069e+05\u003c/td\u003e\n      \u003ctd\u003e6.243420e+03\u003c/td\u003e\n      \u003ctd\u003e1.107834e+05\u003c/td\u003e\n      \u003ctd\u003e8.333767e+04\u003c/td\u003e\n      \u003ctd\u003e2.202925e+04\u003c/td\u003e\n      \u003ctd\u003e132.500000\u003c/td\u003e\n      \u003ctd\u003e2017.000000\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003emax\u003c/th\u003e\n      \u003ctd\u003e3.250000\u003c/td\u003e\n      \u003ctd\u003e6.250565e+07\u003c/td\u003e\n      \u003ctd\u003e2.274362e+07\u003c/td\u003e\n      \u003ctd\u003e2.047057e+07\u003c/td\u003e\n      \u003ctd\u003e2.546439e+06\u003c/td\u003e\n      \u003ctd\u003e1.937313e+07\u003c/td\u003e\n      \u003ctd\u003e1.338459e+07\u003c/td\u003e\n      \u003ctd\u003e5.719097e+06\u003c/td\u003e\n      \u003ctd\u003e551693.650000\u003c/td\u003e\n      \u003ctd\u003e2018.000000\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e",
                        "text/plain": "       AveragePrice  Total Volume          4046          4225          4770  \\\ncount  18249.000000  1.824900e+04  1.824900e+04  1.824900e+04  1.824900e+04   \nmean       1.405978  8.506440e+05  2.930084e+05  2.951546e+05  2.283974e+04   \nstd        0.402677  3.453545e+06  1.264989e+06  1.204120e+06  1.074641e+05   \nmin        0.440000  8.456000e+01  0.000000e+00  0.000000e+00  0.000000e+00   \n25%        1.100000  1.083858e+04  8.540700e+02  3.008780e+03  0.000000e+00   \n50%        1.370000  1.073768e+05  8.645300e+03  2.906102e+04  1.849900e+02   \n75%        1.660000  4.329623e+05  1.110202e+05  1.502069e+05  6.243420e+03   \nmax        3.250000  6.250565e+07  2.274362e+07  2.047057e+07  2.546439e+06   \n\n         Total Bags    Small Bags    Large Bags    XLarge Bags          year  \ncount  1.824900e+04  1.824900e+04  1.824900e+04   18249.000000  18249.000000  \nmean   2.396392e+05  1.821947e+05  5.433809e+04    3106.426507   2016.147899  \nstd    9.862424e+05  7.461785e+05  2.439660e+05   17692.894652      0.939938  \nmin    0.000000e+00  0.000000e+00  0.000000e+00       0.000000   2015.000000  \n25%    5.088640e+03  2.849420e+03  1.274700e+02       0.000000   2015.000000  \n50%    3.974383e+04  2.636282e+04  2.647710e+03       0.000000   2016.000000  \n75%    1.107834e+05  8.333767e+04  2.202925e+04     132.500000   2017.000000  \nmax    1.937313e+07  1.338459e+07  5.719097e+06  551693.650000   2018.000000  "
                    },
                    "execution_count": 26,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df.describe()"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Data Selection\n",
                "\n",
                "### Column names\n",
                "\n",
                "They represent a powerful tool to access subgroups or individual values (in combination with other methods) in a DataFrame."
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## $[]$ vs $[[]]$"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "**Using column name as key will return the column values as type Series**\n",
                "```python\n",
                "# returns a Series with dataframe values for column 'my_col'\n",
                "df['my_col']\n",
                "# this gives the same access but is not recommended. Can't work when there is a space or a not allowed char in the name.\n",
                "df.my_col\n",
                "```\n",
                "**Using a python list of column names as key will return a sub dataframe with that columns**\n",
                "```python\n",
                "# returns a DataFrame with the two columns\n",
                "df[['my_col_A', 'my_col_B']]\n",
                "# returns a Series with my_col_A values\n",
                "df[['my_col_A']]\n",
                "```"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 27,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "False"
                    },
                    "execution_count": 27,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "# this should be False because we just say that column name inside brackets returns a Series\n",
                "type(df['AveragePrice']) == pd.DataFrame"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 28,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "True"
                    },
                    "execution_count": 28,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "type(df['AveragePrice']) == pd.Series"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 29,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "True"
                    },
                    "execution_count": 29,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "# this should be True because we say that a list of column names inside brackets returns a sub dataframe\n",
                "type(df[['AveragePrice']]) == pd.DataFrame"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Accessing column Series"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 30,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "0    1.33\n1    1.35\n2    0.93\n3    1.08\n4    1.28\nName: AveragePrice, dtype: float64"
                    },
                    "execution_count": 30,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df['AveragePrice'].head()"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Accessing subdataframe of one column"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 31,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "\u003cdiv\u003e\n\u003cstyle scoped\u003e\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\u003c/style\u003e\n\u003ctable border=\"1\" class=\"dataframe\"\u003e\n  \u003cthead\u003e\n    \u003ctr style=\"text-align: right;\"\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003eAveragePrice\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003cth\u003e0\u003c/th\u003e\n      \u003ctd\u003e1.33\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e1\u003c/th\u003e\n      \u003ctd\u003e1.35\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e2\u003c/th\u003e\n      \u003ctd\u003e0.93\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e3\u003c/th\u003e\n      \u003ctd\u003e1.08\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e4\u003c/th\u003e\n      \u003ctd\u003e1.28\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e",
                        "text/plain": "   AveragePrice\n0          1.33\n1          1.35\n2          0.93\n3          1.08\n4          1.28"
                    },
                    "execution_count": 31,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df[['AveragePrice']].head()"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Let's try to visualize the difference once more using the method `values` that return the data as numpy array."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 32,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "array([1.33, 1.35, 0.93, ..., 1.87, 1.93, 1.62])"
                    },
                    "execution_count": 32,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df['AveragePrice'].values"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 33,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "array([[1.33],\n       [1.35],\n       [0.93],\n       ...,\n       [1.87],\n       [1.93],\n       [1.62]])"
                    },
                    "execution_count": 33,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                " df[['AveragePrice']].values"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "This is because `Series.values` returns a one dimensional array with the column values and `DataFrame.values` returns a two dimensional array that could be thought as an array of rows."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 34,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "((18249,), (18249, 1))"
                    },
                    "execution_count": 34,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df['AveragePrice'].values.shape, df[['AveragePrice']].values.shape"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "**Exercise**  \n",
                "In the cell below fill in the blanks to display the first 10 rows of a sub-dataframe with columns `Date` and `AveragePrice`. Remember that DataFrame is a class that allows chaining composition."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 35,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "\u003cdiv\u003e\n\u003cstyle scoped\u003e\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\u003c/style\u003e\n\u003ctable border=\"1\" class=\"dataframe\"\u003e\n  \u003cthead\u003e\n    \u003ctr style=\"text-align: right;\"\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003eDate\u003c/th\u003e\n      \u003cth\u003eAveragePrice\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003cth\u003e0\u003c/th\u003e\n      \u003ctd\u003e2015-12-27\u003c/td\u003e\n      \u003ctd\u003e1.33\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e1\u003c/th\u003e\n      \u003ctd\u003e2015-12-20\u003c/td\u003e\n      \u003ctd\u003e1.35\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e2\u003c/th\u003e\n      \u003ctd\u003e2015-12-13\u003c/td\u003e\n      \u003ctd\u003e0.93\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e3\u003c/th\u003e\n      \u003ctd\u003e2015-12-06\u003c/td\u003e\n      \u003ctd\u003e1.08\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e4\u003c/th\u003e\n      \u003ctd\u003e2015-11-29\u003c/td\u003e\n      \u003ctd\u003e1.28\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e5\u003c/th\u003e\n      \u003ctd\u003e2015-11-22\u003c/td\u003e\n      \u003ctd\u003e1.26\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e6\u003c/th\u003e\n      \u003ctd\u003e2015-11-15\u003c/td\u003e\n      \u003ctd\u003e0.99\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e7\u003c/th\u003e\n      \u003ctd\u003e2015-11-08\u003c/td\u003e\n      \u003ctd\u003e0.98\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e8\u003c/th\u003e\n      \u003ctd\u003e2015-11-01\u003c/td\u003e\n      \u003ctd\u003e1.02\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e9\u003c/th\u003e\n      \u003ctd\u003e2015-10-25\u003c/td\u003e\n      \u003ctd\u003e1.07\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e",
                        "text/plain": "        Date  AveragePrice\n0 2015-12-27          1.33\n1 2015-12-20          1.35\n2 2015-12-13          0.93\n3 2015-12-06          1.08\n4 2015-11-29          1.28\n5 2015-11-22          1.26\n6 2015-11-15          0.99\n7 2015-11-08          0.98\n8 2015-11-01          1.02\n9 2015-10-25          1.07"
                    },
                    "execution_count": 35,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df[['Date','AveragePrice']].head(10)"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Filtering\n",
                "\n",
                "An expresion like the one show below represents a condition that will return a boolean list with many boolean values as values in the Series `df['Date']`. And this number, its length is the same size of the number of rows in the DataFrame df.\n",
                "```python\n",
                "df['Date'] == '2015-10-25'\n",
                "```\n",
                "The boolean list will be True for rows where the condition is True and False otherwise. A list of boolean values let as filter a DataFrame based on the condition."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 36,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "0     False\n1     False\n2     False\n3     False\n4     False\n      ...  \n7     False\n8     False\n9     False\n10    False\n11    False\nName: Date, Length: 18249, dtype: bool"
                    },
                    "execution_count": 36,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "condition = df['Date'] == '2015-10-25'\n",
                "condition"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 38,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "\u003cdiv\u003e\n\u003cstyle scoped\u003e\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\u003c/style\u003e\n\u003ctable border=\"1\" class=\"dataframe\"\u003e\n  \u003cthead\u003e\n    \u003ctr style=\"text-align: right;\"\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003eDate\u003c/th\u003e\n      \u003cth\u003eAveragePrice\u003c/th\u003e\n      \u003cth\u003eTotal Volume\u003c/th\u003e\n      \u003cth\u003e4046\u003c/th\u003e\n      \u003cth\u003e4225\u003c/th\u003e\n      \u003cth\u003e4770\u003c/th\u003e\n      \u003cth\u003eTotal Bags\u003c/th\u003e\n      \u003cth\u003eSmall Bags\u003c/th\u003e\n      \u003cth\u003eLarge Bags\u003c/th\u003e\n      \u003cth\u003eXLarge Bags\u003c/th\u003e\n      \u003cth\u003etype\u003c/th\u003e\n      \u003cth\u003eyear\u003c/th\u003e\n      \u003cth\u003eregion\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003cth\u003e9\u003c/th\u003e\n      \u003ctd\u003e2015-10-25\u003c/td\u003e\n      \u003ctd\u003e1.07\u003c/td\u003e\n      \u003ctd\u003e74338.76\u003c/td\u003e\n      \u003ctd\u003e842.40\u003c/td\u003e\n      \u003ctd\u003e64757.44\u003c/td\u003e\n      \u003ctd\u003e113.00\u003c/td\u003e\n      \u003ctd\u003e8625.92\u003c/td\u003e\n      \u003ctd\u003e8061.47\u003c/td\u003e\n      \u003ctd\u003e564.45\u003c/td\u003e\n      \u003ctd\u003e0.0\u003c/td\u003e\n      \u003ctd\u003econventional\u003c/td\u003e\n      \u003ctd\u003e2015\u003c/td\u003e\n      \u003ctd\u003eAlbany\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e9\u003c/th\u003e\n      \u003ctd\u003e2015-10-25\u003c/td\u003e\n      \u003ctd\u003e1.09\u003c/td\u003e\n      \u003ctd\u003e358478.08\u003c/td\u003e\n      \u003ctd\u003e236814.29\u003c/td\u003e\n      \u003ctd\u003e64607.97\u003c/td\u003e\n      \u003ctd\u003e304.36\u003c/td\u003e\n      \u003ctd\u003e56751.46\u003c/td\u003e\n      \u003ctd\u003e31826.88\u003c/td\u003e\n      \u003ctd\u003e24924.58\u003c/td\u003e\n      \u003ctd\u003e0.0\u003c/td\u003e\n      \u003ctd\u003econventional\u003c/td\u003e\n      \u003ctd\u003e2015\u003c/td\u003e\n      \u003ctd\u003eAtlanta\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e9\u003c/th\u003e\n      \u003ctd\u003e2015-10-25\u003c/td\u003e\n      \u003ctd\u003e1.19\u003c/td\u003e\n      \u003ctd\u003e656892.03\u003c/td\u003e\n      \u003ctd\u003e53766.25\u003c/td\u003e\n      \u003ctd\u003e397911.35\u003c/td\u003e\n      \u003ctd\u003e49085.74\u003c/td\u003e\n      \u003ctd\u003e156128.69\u003c/td\u003e\n      \u003ctd\u003e149987.55\u003c/td\u003e\n      \u003ctd\u003e6141.14\u003c/td\u003e\n      \u003ctd\u003e0.0\u003c/td\u003e\n      \u003ctd\u003econventional\u003c/td\u003e\n      \u003ctd\u003e2015\u003c/td\u003e\n      \u003ctd\u003eBaltimoreWashington\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e9\u003c/th\u003e\n      \u003ctd\u003e2015-10-25\u003c/td\u003e\n      \u003ctd\u003e1.11\u003c/td\u003e\n      \u003ctd\u003e59874.45\u003c/td\u003e\n      \u003ctd\u003e29521.58\u003c/td\u003e\n      \u003ctd\u003e10089.82\u003c/td\u003e\n      \u003ctd\u003e6551.57\u003c/td\u003e\n      \u003ctd\u003e13711.48\u003c/td\u003e\n      \u003ctd\u003e13660.98\u003c/td\u003e\n      \u003ctd\u003e0.00\u003c/td\u003e\n      \u003ctd\u003e50.5\u003c/td\u003e\n      \u003ctd\u003econventional\u003c/td\u003e\n      \u003ctd\u003e2015\u003c/td\u003e\n      \u003ctd\u003eBoise\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e9\u003c/th\u003e\n      \u003ctd\u003e2015-10-25\u003c/td\u003e\n      \u003ctd\u003e1.02\u003c/td\u003e\n      \u003ctd\u003e534249.47\u003c/td\u003e\n      \u003ctd\u003e4005.39\u003c/td\u003e\n      \u003ctd\u003e430725.78\u003c/td\u003e\n      \u003ctd\u003e191.31\u003c/td\u003e\n      \u003ctd\u003e99326.99\u003c/td\u003e\n      \u003ctd\u003e94581.94\u003c/td\u003e\n      \u003ctd\u003e4745.05\u003c/td\u003e\n      \u003ctd\u003e0.0\u003c/td\u003e\n      \u003ctd\u003econventional\u003c/td\u003e\n      \u003ctd\u003e2015\u003c/td\u003e\n      \u003ctd\u003eBoston\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e",
                        "text/plain": "        Date  AveragePrice  Total Volume       4046       4225      4770  \\\n9 2015-10-25          1.07      74338.76     842.40   64757.44    113.00   \n9 2015-10-25          1.09     358478.08  236814.29   64607.97    304.36   \n9 2015-10-25          1.19     656892.03   53766.25  397911.35  49085.74   \n9 2015-10-25          1.11      59874.45   29521.58   10089.82   6551.57   \n9 2015-10-25          1.02     534249.47    4005.39  430725.78    191.31   \n\n   Total Bags  Small Bags  Large Bags  XLarge Bags          type  year  \\\n9     8625.92     8061.47      564.45          0.0  conventional  2015   \n9    56751.46    31826.88    24924.58          0.0  conventional  2015   \n9   156128.69   149987.55     6141.14          0.0  conventional  2015   \n9    13711.48    13660.98        0.00         50.5  conventional  2015   \n9    99326.99    94581.94     4745.05          0.0  conventional  2015   \n\n                region  \n9               Albany  \n9              Atlanta  \n9  BaltimoreWashington  \n9                Boise  \n9               Boston  "
                    },
                    "execution_count": 38,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df[condition].head()"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "It's common to find this kind of expressions directly\n",
                "```python\n",
                "df[df['Date'] == '2015-10-25']\n",
                "```\n",
                ""
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Logical expressions\n",
                "\n",
                "**Example of conditions**\n",
                "```python\n",
                "condition = df[col] \u003e value\n",
                "condition = df[col] \u003c= value\n",
                "condition = df[col] == value\n",
                "condition = df[col] != value\n",
                "# in list\n",
                "condition = df[col].isin([value1, value2])\n",
                "# not in list\n",
                "condition = ~df[col].isin([value1, value2])\n",
                "# between (inclusive)\n",
                "condition = df[col].between(value1, value2)\n",
                "```\n",
                "\n",
                "**Then we can combine different conditions with logical operators like \"\u0026\" or \"|\".**\n",
                "```python\n",
                "df.loc[cond1 \u0026 cond2]\n",
                "df.loc[cond1 | cond2]\n",
                "```\n",
                "**These above expressions can be executed without the loc operator**\n",
                "```python\n",
                "df[cond1 \u0026 cond2]\n",
                "df[cond1 | cond2]\n",
                "```\n",
                "\n",
                "**TIP:** many problems can be avoided using parenthesis for each simple condition in situations where we need to combine two or more conditions."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 39,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "\u003cdiv\u003e\n\u003cstyle scoped\u003e\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\u003c/style\u003e\n\u003ctable border=\"1\" class=\"dataframe\"\u003e\n  \u003cthead\u003e\n    \u003ctr style=\"text-align: right;\"\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003eDate\u003c/th\u003e\n      \u003cth\u003eAveragePrice\u003c/th\u003e\n      \u003cth\u003eTotal Volume\u003c/th\u003e\n      \u003cth\u003e4046\u003c/th\u003e\n      \u003cth\u003e4225\u003c/th\u003e\n      \u003cth\u003e4770\u003c/th\u003e\n      \u003cth\u003eTotal Bags\u003c/th\u003e\n      \u003cth\u003eSmall Bags\u003c/th\u003e\n      \u003cth\u003eLarge Bags\u003c/th\u003e\n      \u003cth\u003eXLarge Bags\u003c/th\u003e\n      \u003cth\u003etype\u003c/th\u003e\n      \u003cth\u003eyear\u003c/th\u003e\n      \u003cth\u003eregion\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003cth\u003e9\u003c/th\u003e\n      \u003ctd\u003e2015-10-25\u003c/td\u003e\n      \u003ctd\u003e0.86\u003c/td\u003e\n      \u003ctd\u003e1010394.81\u003c/td\u003e\n      \u003ctd\u003e557469.46\u003c/td\u003e\n      \u003ctd\u003e301143.50\u003c/td\u003e\n      \u003ctd\u003e49959.10\u003c/td\u003e\n      \u003ctd\u003e101822.75\u003c/td\u003e\n      \u003ctd\u003e96417.63\u003c/td\u003e\n      \u003ctd\u003e5279.41\u003c/td\u003e\n      \u003ctd\u003e125.71\u003c/td\u003e\n      \u003ctd\u003econventional\u003c/td\u003e\n      \u003ctd\u003e2015\u003c/td\u003e\n      \u003ctd\u003eDallasFtWorth\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e9\u003c/th\u003e\n      \u003ctd\u003e2015-10-25\u003c/td\u003e\n      \u003ctd\u003e0.88\u003c/td\u003e\n      \u003ctd\u003e933623.58\u003c/td\u003e\n      \u003ctd\u003e437329.85\u003c/td\u003e\n      \u003ctd\u003e313129.29\u003c/td\u003e\n      \u003ctd\u003e81274.85\u003c/td\u003e\n      \u003ctd\u003e101889.59\u003c/td\u003e\n      \u003ctd\u003e57577.21\u003c/td\u003e\n      \u003ctd\u003e44260.60\u003c/td\u003e\n      \u003ctd\u003e51.78\u003c/td\u003e\n      \u003ctd\u003econventional\u003c/td\u003e\n      \u003ctd\u003e2015\u003c/td\u003e\n      \u003ctd\u003eHouston\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e9\u003c/th\u003e\n      \u003ctd\u003e2015-10-25\u003c/td\u003e\n      \u003ctd\u003e0.83\u003c/td\u003e\n      \u003ctd\u003e761261.71\u003c/td\u003e\n      \u003ctd\u003e435986.90\u003c/td\u003e\n      \u003ctd\u003e240689.98\u003c/td\u003e\n      \u003ctd\u003e19968.66\u003c/td\u003e\n      \u003ctd\u003e64616.17\u003c/td\u003e\n      \u003ctd\u003e64585.35\u003c/td\u003e\n      \u003ctd\u003e30.82\u003c/td\u003e\n      \u003ctd\u003e0.00\u003c/td\u003e\n      \u003ctd\u003econventional\u003c/td\u003e\n      \u003ctd\u003e2015\u003c/td\u003e\n      \u003ctd\u003ePhoenixTucson\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e9\u003c/th\u003e\n      \u003ctd\u003e2015-10-25\u003c/td\u003e\n      \u003ctd\u003e0.86\u003c/td\u003e\n      \u003ctd\u003e4912068.04\u003c/td\u003e\n      \u003ctd\u003e2542914.87\u003c/td\u003e\n      \u003ctd\u003e1537781.45\u003c/td\u003e\n      \u003ctd\u003e247539.31\u003c/td\u003e\n      \u003ctd\u003e583832.41\u003c/td\u003e\n      \u003ctd\u003e475267.20\u003c/td\u003e\n      \u003ctd\u003e108231.39\u003c/td\u003e\n      \u003ctd\u003e333.82\u003c/td\u003e\n      \u003ctd\u003econventional\u003c/td\u003e\n      \u003ctd\u003e2015\u003c/td\u003e\n      \u003ctd\u003eSouthCentral\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e9\u003c/th\u003e\n      \u003ctd\u003e2015-10-25\u003c/td\u003e\n      \u003ctd\u003e0.82\u003c/td\u003e\n      \u003ctd\u003e635873.60\u003c/td\u003e\n      \u003ctd\u003e363487.08\u003c/td\u003e\n      \u003ctd\u003e166607.85\u003c/td\u003e\n      \u003ctd\u003e31960.04\u003c/td\u003e\n      \u003ctd\u003e73818.63\u003c/td\u003e\n      \u003ctd\u003e72717.86\u003c/td\u003e\n      \u003ctd\u003e1100.77\u003c/td\u003e\n      \u003ctd\u003e0.00\u003c/td\u003e\n      \u003ctd\u003econventional\u003c/td\u003e\n      \u003ctd\u003e2015\u003c/td\u003e\n      \u003ctd\u003eWestTexNewMexico\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e",
                        "text/plain": "        Date  AveragePrice  Total Volume        4046        4225       4770  \\\n9 2015-10-25          0.86    1010394.81   557469.46   301143.50   49959.10   \n9 2015-10-25          0.88     933623.58   437329.85   313129.29   81274.85   \n9 2015-10-25          0.83     761261.71   435986.90   240689.98   19968.66   \n9 2015-10-25          0.86    4912068.04  2542914.87  1537781.45  247539.31   \n9 2015-10-25          0.82     635873.60   363487.08   166607.85   31960.04   \n\n   Total Bags  Small Bags  Large Bags  XLarge Bags          type  year  \\\n9   101822.75    96417.63     5279.41       125.71  conventional  2015   \n9   101889.59    57577.21    44260.60        51.78  conventional  2015   \n9    64616.17    64585.35       30.82         0.00  conventional  2015   \n9   583832.41   475267.20   108231.39       333.82  conventional  2015   \n9    73818.63    72717.86     1100.77         0.00  conventional  2015   \n\n             region  \n9     DallasFtWorth  \n9           Houston  \n9     PhoenixTucson  \n9      SouthCentral  \n9  WestTexNewMexico  "
                    },
                    "execution_count": 39,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df[(df['Date'] == '2015-10-25') \u0026 (df['AveragePrice'] \u003c .90)].head()"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "```python\n",
                "# be careful with expressions like this that will fail when doing the bit operation\n",
                "df[df['Date'] == '2015-10-25' \u0026 df['AveragePrice'] \u003c .90]\n",
                "```\n",
                ""
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# .loc\\[\\] vs .iloc\\[\\]\n",
                "\n",
                "Accessing rows"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## .loc\\[\\]\n",
                "\n",
                "This operator allows us to access information by index label, but by definition it could be used with a boolean array as we saw with conditions:\n",
                "- Access a group of rows and columns by label(s) or a boolean array.  \n",
                "- .loc\\[\\] is primarily label based, but may also be used with a boolean array."
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "When using df.info() we discover that the number of unique values for index (index domain values) is between 0 and 11 included. So, we can use `.loc` to filter the rows where the index value is 9."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 43,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "\u003cdiv\u003e\n\u003cstyle scoped\u003e\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\u003c/style\u003e\n\u003ctable border=\"1\" class=\"dataframe\"\u003e\n  \u003cthead\u003e\n    \u003ctr style=\"text-align: right;\"\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003eDate\u003c/th\u003e\n      \u003cth\u003eAveragePrice\u003c/th\u003e\n      \u003cth\u003eTotal Volume\u003c/th\u003e\n      \u003cth\u003e4046\u003c/th\u003e\n      \u003cth\u003e4225\u003c/th\u003e\n      \u003cth\u003e4770\u003c/th\u003e\n      \u003cth\u003eTotal Bags\u003c/th\u003e\n      \u003cth\u003eSmall Bags\u003c/th\u003e\n      \u003cth\u003eLarge Bags\u003c/th\u003e\n      \u003cth\u003eXLarge Bags\u003c/th\u003e\n      \u003cth\u003etype\u003c/th\u003e\n      \u003cth\u003eyear\u003c/th\u003e\n      \u003cth\u003eregion\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003cth\u003e9\u003c/th\u003e\n      \u003ctd\u003e2015-10-25\u003c/td\u003e\n      \u003ctd\u003e1.07\u003c/td\u003e\n      \u003ctd\u003e74338.76\u003c/td\u003e\n      \u003ctd\u003e842.40\u003c/td\u003e\n      \u003ctd\u003e64757.44\u003c/td\u003e\n      \u003ctd\u003e113.00\u003c/td\u003e\n      \u003ctd\u003e8625.92\u003c/td\u003e\n      \u003ctd\u003e8061.47\u003c/td\u003e\n      \u003ctd\u003e564.45\u003c/td\u003e\n      \u003ctd\u003e0.00\u003c/td\u003e\n      \u003ctd\u003econventional\u003c/td\u003e\n      \u003ctd\u003e2015\u003c/td\u003e\n      \u003ctd\u003eAlbany\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e9\u003c/th\u003e\n      \u003ctd\u003e2015-10-25\u003c/td\u003e\n      \u003ctd\u003e1.09\u003c/td\u003e\n      \u003ctd\u003e358478.08\u003c/td\u003e\n      \u003ctd\u003e236814.29\u003c/td\u003e\n      \u003ctd\u003e64607.97\u003c/td\u003e\n      \u003ctd\u003e304.36\u003c/td\u003e\n      \u003ctd\u003e56751.46\u003c/td\u003e\n      \u003ctd\u003e31826.88\u003c/td\u003e\n      \u003ctd\u003e24924.58\u003c/td\u003e\n      \u003ctd\u003e0.00\u003c/td\u003e\n      \u003ctd\u003econventional\u003c/td\u003e\n      \u003ctd\u003e2015\u003c/td\u003e\n      \u003ctd\u003eAtlanta\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e9\u003c/th\u003e\n      \u003ctd\u003e2015-10-25\u003c/td\u003e\n      \u003ctd\u003e1.19\u003c/td\u003e\n      \u003ctd\u003e656892.03\u003c/td\u003e\n      \u003ctd\u003e53766.25\u003c/td\u003e\n      \u003ctd\u003e397911.35\u003c/td\u003e\n      \u003ctd\u003e49085.74\u003c/td\u003e\n      \u003ctd\u003e156128.69\u003c/td\u003e\n      \u003ctd\u003e149987.55\u003c/td\u003e\n      \u003ctd\u003e6141.14\u003c/td\u003e\n      \u003ctd\u003e0.00\u003c/td\u003e\n      \u003ctd\u003econventional\u003c/td\u003e\n      \u003ctd\u003e2015\u003c/td\u003e\n      \u003ctd\u003eBaltimoreWashington\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e9\u003c/th\u003e\n      \u003ctd\u003e2015-10-25\u003c/td\u003e\n      \u003ctd\u003e1.11\u003c/td\u003e\n      \u003ctd\u003e59874.45\u003c/td\u003e\n      \u003ctd\u003e29521.58\u003c/td\u003e\n      \u003ctd\u003e10089.82\u003c/td\u003e\n      \u003ctd\u003e6551.57\u003c/td\u003e\n      \u003ctd\u003e13711.48\u003c/td\u003e\n      \u003ctd\u003e13660.98\u003c/td\u003e\n      \u003ctd\u003e0.00\u003c/td\u003e\n      \u003ctd\u003e50.50\u003c/td\u003e\n      \u003ctd\u003econventional\u003c/td\u003e\n      \u003ctd\u003e2015\u003c/td\u003e\n      \u003ctd\u003eBoise\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e9\u003c/th\u003e\n      \u003ctd\u003e2015-10-25\u003c/td\u003e\n      \u003ctd\u003e1.02\u003c/td\u003e\n      \u003ctd\u003e534249.47\u003c/td\u003e\n      \u003ctd\u003e4005.39\u003c/td\u003e\n      \u003ctd\u003e430725.78\u003c/td\u003e\n      \u003ctd\u003e191.31\u003c/td\u003e\n      \u003ctd\u003e99326.99\u003c/td\u003e\n      \u003ctd\u003e94581.94\u003c/td\u003e\n      \u003ctd\u003e4745.05\u003c/td\u003e\n      \u003ctd\u003e0.00\u003c/td\u003e\n      \u003ctd\u003econventional\u003c/td\u003e\n      \u003ctd\u003e2015\u003c/td\u003e\n      \u003ctd\u003eBoston\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e...\u003c/th\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e9\u003c/th\u003e\n      \u003ctd\u003e2018-01-21\u003c/td\u003e\n      \u003ctd\u003e1.27\u003c/td\u003e\n      \u003ctd\u003e3159.80\u003c/td\u003e\n      \u003ctd\u003e92.12\u003c/td\u003e\n      \u003ctd\u003e73.17\u003c/td\u003e\n      \u003ctd\u003e0.00\u003c/td\u003e\n      \u003ctd\u003e2994.51\u003c/td\u003e\n      \u003ctd\u003e2117.69\u003c/td\u003e\n      \u003ctd\u003e876.82\u003c/td\u003e\n      \u003ctd\u003e0.00\u003c/td\u003e\n      \u003ctd\u003eorganic\u003c/td\u003e\n      \u003ctd\u003e2018\u003c/td\u003e\n      \u003ctd\u003eSyracuse\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e9\u003c/th\u003e\n      \u003ctd\u003e2018-01-21\u003c/td\u003e\n      \u003ctd\u003e1.52\u003c/td\u003e\n      \u003ctd\u003e6871.05\u003c/td\u003e\n      \u003ctd\u003e76.66\u003c/td\u003e\n      \u003ctd\u003e407.09\u003c/td\u003e\n      \u003ctd\u003e0.00\u003c/td\u003e\n      \u003ctd\u003e6387.30\u003c/td\u003e\n      \u003ctd\u003e6375.55\u003c/td\u003e\n      \u003ctd\u003e11.75\u003c/td\u003e\n      \u003ctd\u003e0.00\u003c/td\u003e\n      \u003ctd\u003eorganic\u003c/td\u003e\n      \u003ctd\u003e2018\u003c/td\u003e\n      \u003ctd\u003eTampa\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e9\u003c/th\u003e\n      \u003ctd\u003e2018-01-21\u003c/td\u003e\n      \u003ctd\u003e1.63\u003c/td\u003e\n      \u003ctd\u003e1283987.65\u003c/td\u003e\n      \u003ctd\u003e108705.28\u003c/td\u003e\n      \u003ctd\u003e259172.13\u003c/td\u003e\n      \u003ctd\u003e1490.02\u003c/td\u003e\n      \u003ctd\u003e914409.26\u003c/td\u003e\n      \u003ctd\u003e710654.40\u003c/td\u003e\n      \u003ctd\u003e203526.59\u003c/td\u003e\n      \u003ctd\u003e228.27\u003c/td\u003e\n      \u003ctd\u003eorganic\u003c/td\u003e\n      \u003ctd\u003e2018\u003c/td\u003e\n      \u003ctd\u003eTotalUS\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e9\u003c/th\u003e\n      \u003ctd\u003e2018-01-21\u003c/td\u003e\n      \u003ctd\u003e1.83\u003c/td\u003e\n      \u003ctd\u003e189317.99\u003c/td\u003e\n      \u003ctd\u003e27049.44\u003c/td\u003e\n      \u003ctd\u003e33561.32\u003c/td\u003e\n      \u003ctd\u003e439.47\u003c/td\u003e\n      \u003ctd\u003e128267.76\u003c/td\u003e\n      \u003ctd\u003e76091.99\u003c/td\u003e\n      \u003ctd\u003e51947.50\u003c/td\u003e\n      \u003ctd\u003e228.27\u003c/td\u003e\n      \u003ctd\u003eorganic\u003c/td\u003e\n      \u003ctd\u003e2018\u003c/td\u003e\n      \u003ctd\u003eWest\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e9\u003c/th\u003e\n      \u003ctd\u003e2018-01-21\u003c/td\u003e\n      \u003ctd\u003e1.87\u003c/td\u003e\n      \u003ctd\u003e13766.76\u003c/td\u003e\n      \u003ctd\u003e1191.92\u003c/td\u003e\n      \u003ctd\u003e2452.79\u003c/td\u003e\n      \u003ctd\u003e727.94\u003c/td\u003e\n      \u003ctd\u003e9394.11\u003c/td\u003e\n      \u003ctd\u003e9351.80\u003c/td\u003e\n      \u003ctd\u003e42.31\u003c/td\u003e\n      \u003ctd\u003e0.00\u003c/td\u003e\n      \u003ctd\u003eorganic\u003c/td\u003e\n      \u003ctd\u003e2018\u003c/td\u003e\n      \u003ctd\u003eWestTexNewMexico\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e432 rows × 13 columns\u003c/p\u003e\n\u003c/div\u003e",
                        "text/plain": "         Date  AveragePrice  Total Volume       4046       4225      4770  \\\n9  2015-10-25          1.07      74338.76     842.40   64757.44    113.00   \n9  2015-10-25          1.09     358478.08  236814.29   64607.97    304.36   \n9  2015-10-25          1.19     656892.03   53766.25  397911.35  49085.74   \n9  2015-10-25          1.11      59874.45   29521.58   10089.82   6551.57   \n9  2015-10-25          1.02     534249.47    4005.39  430725.78    191.31   \n..        ...           ...           ...        ...        ...       ...   \n9  2018-01-21          1.27       3159.80      92.12      73.17      0.00   \n9  2018-01-21          1.52       6871.05      76.66     407.09      0.00   \n9  2018-01-21          1.63    1283987.65  108705.28  259172.13   1490.02   \n9  2018-01-21          1.83     189317.99   27049.44   33561.32    439.47   \n9  2018-01-21          1.87      13766.76    1191.92    2452.79    727.94   \n\n    Total Bags  Small Bags  Large Bags  XLarge Bags          type  year  \\\n9      8625.92     8061.47      564.45         0.00  conventional  2015   \n9     56751.46    31826.88    24924.58         0.00  conventional  2015   \n9    156128.69   149987.55     6141.14         0.00  conventional  2015   \n9     13711.48    13660.98        0.00        50.50  conventional  2015   \n9     99326.99    94581.94     4745.05         0.00  conventional  2015   \n..         ...         ...         ...          ...           ...   ...   \n9      2994.51     2117.69      876.82         0.00       organic  2018   \n9      6387.30     6375.55       11.75         0.00       organic  2018   \n9    914409.26   710654.40   203526.59       228.27       organic  2018   \n9    128267.76    76091.99    51947.50       228.27       organic  2018   \n9      9394.11     9351.80       42.31         0.00       organic  2018   \n\n                 region  \n9                Albany  \n9               Atlanta  \n9   BaltimoreWashington  \n9                 Boise  \n9                Boston  \n..                  ...  \n9              Syracuse  \n9                 Tampa  \n9               TotalUS  \n9                  West  \n9      WestTexNewMexico  \n\n[432 rows x 13 columns]"
                    },
                    "execution_count": 43,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df.loc[9]"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## .iloc\\[\\]\n",
                "\n",
                "This operator allows us to access information by index position in the way we usually do with other programing languages like C.\n",
                "- Purely integer-location based indexing for selection by position.\n",
                "- .iloc[] is primarily integer position based (from 0 to length-1 of the axis), but may also be used with a boolean array."
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "When using `df.iloc[9]` we are going to access to the 10th row in the DataFrame df. The returned value should be of type Series with the row values (`df.iloc[9].values`) as values and the columns names as the Series index."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 47,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "Date            2015-10-25 00:00:00\nAveragePrice                   1.07\nTotal Volume               74338.76\n4046                          842.4\n4225                       64757.44\n4770                          113.0\nTotal Bags                  8625.92\nSmall Bags                  8061.47\nLarge Bags                   564.45\nXLarge Bags                     0.0\ntype                   conventional\nyear                           2015\nregion                       Albany\nName: 9, dtype: object"
                    },
                    "execution_count": 47,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df.iloc[9]"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 36,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": [
                            "pandas.core.series.Series"
                        ]
                    },
                    "execution_count": 36,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "type(df.iloc[9])"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "The name of the series is the index label value of the original dataframe."
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "\u003ccenter\u003e\u003ch3 style='color:gray; display:block; align:center;'\u003eTIP: practice to really learn how and when to use .loc vs i.loc\u003c/h3\u003e\u003c/center\u003e"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# Mathematical and other methods on a DataFrame\n",
                "\n",
                "Pandas Series and DataFrame offers access to hundred of methods to operate on them like: *sum(), mul(), mean(), std(), max(), min(), etc*. All of these methods usually operate by default over columns but they can operate over rows.\n",
                ""
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Look at the next cell results and try to think about what happened (take a look at fields like type or region)."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 48,
            "metadata": {},
            "outputs": [
                {
                    "name": "stderr",
                    "output_type": "stream",
                    "text": "/tmp/ipykernel_32/1703867807.py:1: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with 'numeric_only=None') is deprecated; in a future version this will raise TypeError.  Select only valid columns before calling the reduction.\n  df.sum()\n"
                },
                {
                    "data": {
                        "text/plain": "AveragePrice                                              25657.7\nTotal Volume                                   15523402593.400002\n4046                                                5347110739.26\n4225                                                5386275717.93\n4770                                                 416802342.13\nTotal Bags                                      4373175798.389999\nSmall Bags                                          3324870837.51\nLarge Bags                                           991615770.55\nXLarge Bags                                           56689177.33\ntype            conventionalconventionalconventionalconvention...\nyear                                                     36792683\nregion          AlbanyAlbanyAlbanyAlbanyAlbanyAlbanyAlbanyAlba...\ndtype: object"
                    },
                    "execution_count": 48,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df.sum()"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 49,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "1.4059784097758825"
                    },
                    "execution_count": 49,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df['AveragePrice'].mean()"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# Missing Data\n",
                "\n",
                "This is a critical problem for any Data Scientist and deserves its own Lecture. What to do when some of the data are missing?\n",
                "\n",
                "Pandas offers some options to explore a dataframe looking for missing data.\n",
                "\n",
                "```python\n",
                "# returns a boolean dataframe of the same size with True values for cells where values are NaN\n",
                "df.isna()\n",
                "# returns a boolean dataframe of the same size with True values for cells where values aren't NaN\n",
                "df.notna()\n",
                "# alias of the above methods\n",
                "df.isnull()\n",
                "df.notnull()\n",
                "```"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Count the number of NaN values for every column"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 50,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "Date            0\nAveragePrice    0\nTotal Volume    0\n4046            0\n4225            0\n4770            0\nTotal Bags      0\nSmall Bags      0\nLarge Bags      0\nXLarge Bags     0\ntype            0\nyear            0\nregion          0\ndtype: int64"
                    },
                    "execution_count": 50,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df.isna().sum()"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Count the number of NaN values per row"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 51,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "0     0\n1     0\n2     0\n3     0\n4     0\n     ..\n7     0\n8     0\n9     0\n10    0\n11    0\nLength: 18249, dtype: int64"
                    },
                    "execution_count": 51,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df.isna().sum(axis=1)"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Count the total number of NaN values in the dataframe"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 52,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "0"
                    },
                    "execution_count": 52,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df.isna().sum().sum()"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Select the rows with at least one NaN value"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 53,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "\u003cdiv\u003e\n\u003cstyle scoped\u003e\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\u003c/style\u003e\n\u003ctable border=\"1\" class=\"dataframe\"\u003e\n  \u003cthead\u003e\n    \u003ctr style=\"text-align: right;\"\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003eDate\u003c/th\u003e\n      \u003cth\u003eAveragePrice\u003c/th\u003e\n      \u003cth\u003eTotal Volume\u003c/th\u003e\n      \u003cth\u003e4046\u003c/th\u003e\n      \u003cth\u003e4225\u003c/th\u003e\n      \u003cth\u003e4770\u003c/th\u003e\n      \u003cth\u003eTotal Bags\u003c/th\u003e\n      \u003cth\u003eSmall Bags\u003c/th\u003e\n      \u003cth\u003eLarge Bags\u003c/th\u003e\n      \u003cth\u003eXLarge Bags\u003c/th\u003e\n      \u003cth\u003etype\u003c/th\u003e\n      \u003cth\u003eyear\u003c/th\u003e\n      \u003cth\u003eregion\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e",
                        "text/plain": "Empty DataFrame\nColumns: [Date, AveragePrice, Total Volume, 4046, 4225, 4770, Total Bags, Small Bags, Large Bags, XLarge Bags, type, year, region]\nIndex: []"
                    },
                    "execution_count": 53,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df[df.isna().any(axis=1)]"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "There are specific methods related to face this problem like:\n",
                "- `fillna()`\n",
                "- `bfill()`\n",
                "- `ffill()`\n",
                "- `dropna()`\n",
                "\n",
                "It's important to learn to handle [missing data](https://pandas.pydata.org/pandas-docs/stable/user_guide/missing_data.html)"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# Dropping\n",
                "\n",
                "Sometimes you'll want to discard information. Here is an example of how to use the [`drop`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.drop.html) method to do that.\n",
                "\n",
                "```python\n",
                "df.drop(labels=None, axis=0, index=None, columns=None, level=None, inplace=False, errors='raise')\n",
                "```\n",
                ""
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 54,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "\u003cdiv\u003e\n\u003cstyle scoped\u003e\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\u003c/style\u003e\n\u003ctable border=\"1\" class=\"dataframe\"\u003e\n  \u003cthead\u003e\n    \u003ctr style=\"text-align: right;\"\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003eDate\u003c/th\u003e\n      \u003cth\u003eAveragePrice\u003c/th\u003e\n      \u003cth\u003eTotal Volume\u003c/th\u003e\n      \u003cth\u003etype\u003c/th\u003e\n      \u003cth\u003eyear\u003c/th\u003e\n      \u003cth\u003eregion\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003cth\u003e0\u003c/th\u003e\n      \u003ctd\u003e2015-12-27\u003c/td\u003e\n      \u003ctd\u003e1.33\u003c/td\u003e\n      \u003ctd\u003e64236.62\u003c/td\u003e\n      \u003ctd\u003econventional\u003c/td\u003e\n      \u003ctd\u003e2015\u003c/td\u003e\n      \u003ctd\u003eAlbany\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e1\u003c/th\u003e\n      \u003ctd\u003e2015-12-20\u003c/td\u003e\n      \u003ctd\u003e1.35\u003c/td\u003e\n      \u003ctd\u003e54876.98\u003c/td\u003e\n      \u003ctd\u003econventional\u003c/td\u003e\n      \u003ctd\u003e2015\u003c/td\u003e\n      \u003ctd\u003eAlbany\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e2\u003c/th\u003e\n      \u003ctd\u003e2015-12-13\u003c/td\u003e\n      \u003ctd\u003e0.93\u003c/td\u003e\n      \u003ctd\u003e118220.22\u003c/td\u003e\n      \u003ctd\u003econventional\u003c/td\u003e\n      \u003ctd\u003e2015\u003c/td\u003e\n      \u003ctd\u003eAlbany\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e3\u003c/th\u003e\n      \u003ctd\u003e2015-12-06\u003c/td\u003e\n      \u003ctd\u003e1.08\u003c/td\u003e\n      \u003ctd\u003e78992.15\u003c/td\u003e\n      \u003ctd\u003econventional\u003c/td\u003e\n      \u003ctd\u003e2015\u003c/td\u003e\n      \u003ctd\u003eAlbany\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e4\u003c/th\u003e\n      \u003ctd\u003e2015-11-29\u003c/td\u003e\n      \u003ctd\u003e1.28\u003c/td\u003e\n      \u003ctd\u003e51039.60\u003c/td\u003e\n      \u003ctd\u003econventional\u003c/td\u003e\n      \u003ctd\u003e2015\u003c/td\u003e\n      \u003ctd\u003eAlbany\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e...\u003c/th\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e7\u003c/th\u003e\n      \u003ctd\u003e2018-02-04\u003c/td\u003e\n      \u003ctd\u003e1.63\u003c/td\u003e\n      \u003ctd\u003e17074.83\u003c/td\u003e\n      \u003ctd\u003eorganic\u003c/td\u003e\n      \u003ctd\u003e2018\u003c/td\u003e\n      \u003ctd\u003eWestTexNewMexico\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e8\u003c/th\u003e\n      \u003ctd\u003e2018-01-28\u003c/td\u003e\n      \u003ctd\u003e1.71\u003c/td\u003e\n      \u003ctd\u003e13888.04\u003c/td\u003e\n      \u003ctd\u003eorganic\u003c/td\u003e\n      \u003ctd\u003e2018\u003c/td\u003e\n      \u003ctd\u003eWestTexNewMexico\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e9\u003c/th\u003e\n      \u003ctd\u003e2018-01-21\u003c/td\u003e\n      \u003ctd\u003e1.87\u003c/td\u003e\n      \u003ctd\u003e13766.76\u003c/td\u003e\n      \u003ctd\u003eorganic\u003c/td\u003e\n      \u003ctd\u003e2018\u003c/td\u003e\n      \u003ctd\u003eWestTexNewMexico\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e10\u003c/th\u003e\n      \u003ctd\u003e2018-01-14\u003c/td\u003e\n      \u003ctd\u003e1.93\u003c/td\u003e\n      \u003ctd\u003e16205.22\u003c/td\u003e\n      \u003ctd\u003eorganic\u003c/td\u003e\n      \u003ctd\u003e2018\u003c/td\u003e\n      \u003ctd\u003eWestTexNewMexico\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e11\u003c/th\u003e\n      \u003ctd\u003e2018-01-07\u003c/td\u003e\n      \u003ctd\u003e1.62\u003c/td\u003e\n      \u003ctd\u003e17489.58\u003c/td\u003e\n      \u003ctd\u003eorganic\u003c/td\u003e\n      \u003ctd\u003e2018\u003c/td\u003e\n      \u003ctd\u003eWestTexNewMexico\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e18249 rows × 6 columns\u003c/p\u003e\n\u003c/div\u003e",
                        "text/plain": "         Date  AveragePrice  Total Volume          type  year  \\\n0  2015-12-27          1.33      64236.62  conventional  2015   \n1  2015-12-20          1.35      54876.98  conventional  2015   \n2  2015-12-13          0.93     118220.22  conventional  2015   \n3  2015-12-06          1.08      78992.15  conventional  2015   \n4  2015-11-29          1.28      51039.60  conventional  2015   \n..        ...           ...           ...           ...   ...   \n7  2018-02-04          1.63      17074.83       organic  2018   \n8  2018-01-28          1.71      13888.04       organic  2018   \n9  2018-01-21          1.87      13766.76       organic  2018   \n10 2018-01-14          1.93      16205.22       organic  2018   \n11 2018-01-07          1.62      17489.58       organic  2018   \n\n              region  \n0             Albany  \n1             Albany  \n2             Albany  \n3             Albany  \n4             Albany  \n..               ...  \n7   WestTexNewMexico  \n8   WestTexNewMexico  \n9   WestTexNewMexico  \n10  WestTexNewMexico  \n11  WestTexNewMexico  \n\n[18249 rows x 6 columns]"
                    },
                    "execution_count": 54,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "drop_columns = ['4046', '4225', '4770', 'Total Bags', 'Small Bags', 'Large Bags', 'XLarge Bags']\n",
                "df = df.drop(columns=drop_columns)\n",
                "df"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# Sorting\n",
                "\n",
                "[`sort_values`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.sort_values.html) and [`sort_index`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.sort_index.html) are common methods when using pandas.\n",
                "\n",
                "**sort_values**: Sort by the values along either axis.\n",
                "```python\n",
                "df.sort_values(by, axis=0, ascending=True, inplace=False, kind='quicksort',\n",
                "               na_position='last', ignore_index=False, key=None)\n",
                "```"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Next cell filter data for a particular Date and type. Then sort values by region in ascending order and finally display only the first 10 rows."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 55,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "\u003cdiv\u003e\n\u003cstyle scoped\u003e\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\u003c/style\u003e\n\u003ctable border=\"1\" class=\"dataframe\"\u003e\n  \u003cthead\u003e\n    \u003ctr style=\"text-align: right;\"\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003eDate\u003c/th\u003e\n      \u003cth\u003eAveragePrice\u003c/th\u003e\n      \u003cth\u003eTotal Volume\u003c/th\u003e\n      \u003cth\u003etype\u003c/th\u003e\n      \u003cth\u003eyear\u003c/th\u003e\n      \u003cth\u003eregion\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003cth\u003e11\u003c/th\u003e\n      \u003ctd\u003e2018-01-07\u003c/td\u003e\n      \u003ctd\u003e1.54\u003c/td\u003e\n      \u003ctd\u003e4816.90\u003c/td\u003e\n      \u003ctd\u003eorganic\u003c/td\u003e\n      \u003ctd\u003e2018\u003c/td\u003e\n      \u003ctd\u003eAlbany\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e11\u003c/th\u003e\n      \u003ctd\u003e2018-01-07\u003c/td\u003e\n      \u003ctd\u003e1.53\u003c/td\u003e\n      \u003ctd\u003e15714.11\u003c/td\u003e\n      \u003ctd\u003eorganic\u003c/td\u003e\n      \u003ctd\u003e2018\u003c/td\u003e\n      \u003ctd\u003eAtlanta\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e11\u003c/th\u003e\n      \u003ctd\u003e2018-01-07\u003c/td\u003e\n      \u003ctd\u003e1.15\u003c/td\u003e\n      \u003ctd\u003e82282.71\u003c/td\u003e\n      \u003ctd\u003eorganic\u003c/td\u003e\n      \u003ctd\u003e2018\u003c/td\u003e\n      \u003ctd\u003eBaltimoreWashington\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e11\u003c/th\u003e\n      \u003ctd\u003e2018-01-07\u003c/td\u003e\n      \u003ctd\u003e1.77\u003c/td\u003e\n      \u003ctd\u003e2553.90\u003c/td\u003e\n      \u003ctd\u003eorganic\u003c/td\u003e\n      \u003ctd\u003e2018\u003c/td\u003e\n      \u003ctd\u003eBoise\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e11\u003c/th\u003e\n      \u003ctd\u003e2018-01-07\u003c/td\u003e\n      \u003ctd\u003e1.91\u003c/td\u003e\n      \u003ctd\u003e30096.00\u003c/td\u003e\n      \u003ctd\u003eorganic\u003c/td\u003e\n      \u003ctd\u003e2018\u003c/td\u003e\n      \u003ctd\u003eBoston\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e11\u003c/th\u003e\n      \u003ctd\u003e2018-01-07\u003c/td\u003e\n      \u003ctd\u003e1.17\u003c/td\u003e\n      \u003ctd\u003e9115.92\u003c/td\u003e\n      \u003ctd\u003eorganic\u003c/td\u003e\n      \u003ctd\u003e2018\u003c/td\u003e\n      \u003ctd\u003eBuffaloRochester\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e11\u003c/th\u003e\n      \u003ctd\u003e2018-01-07\u003c/td\u003e\n      \u003ctd\u003e1.95\u003c/td\u003e\n      \u003ctd\u003e156341.57\u003c/td\u003e\n      \u003ctd\u003eorganic\u003c/td\u003e\n      \u003ctd\u003e2018\u003c/td\u003e\n      \u003ctd\u003eCalifornia\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e11\u003c/th\u003e\n      \u003ctd\u003e2018-01-07\u003c/td\u003e\n      \u003ctd\u003e1.08\u003c/td\u003e\n      \u003ctd\u003e28741.11\u003c/td\u003e\n      \u003ctd\u003eorganic\u003c/td\u003e\n      \u003ctd\u003e2018\u003c/td\u003e\n      \u003ctd\u003eCharlotte\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e11\u003c/th\u003e\n      \u003ctd\u003e2018-01-07\u003c/td\u003e\n      \u003ctd\u003e1.83\u003c/td\u003e\n      \u003ctd\u003e41573.25\u003c/td\u003e\n      \u003ctd\u003eorganic\u003c/td\u003e\n      \u003ctd\u003e2018\u003c/td\u003e\n      \u003ctd\u003eChicago\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e11\u003c/th\u003e\n      \u003ctd\u003e2018-01-07\u003c/td\u003e\n      \u003ctd\u003e1.71\u003c/td\u003e\n      \u003ctd\u003e13141.82\u003c/td\u003e\n      \u003ctd\u003eorganic\u003c/td\u003e\n      \u003ctd\u003e2018\u003c/td\u003e\n      \u003ctd\u003eCincinnatiDayton\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e",
                        "text/plain": "         Date  AveragePrice  Total Volume     type  year               region\n11 2018-01-07          1.54       4816.90  organic  2018               Albany\n11 2018-01-07          1.53      15714.11  organic  2018              Atlanta\n11 2018-01-07          1.15      82282.71  organic  2018  BaltimoreWashington\n11 2018-01-07          1.77       2553.90  organic  2018                Boise\n11 2018-01-07          1.91      30096.00  organic  2018               Boston\n11 2018-01-07          1.17       9115.92  organic  2018     BuffaloRochester\n11 2018-01-07          1.95     156341.57  organic  2018           California\n11 2018-01-07          1.08      28741.11  organic  2018            Charlotte\n11 2018-01-07          1.83      41573.25  organic  2018              Chicago\n11 2018-01-07          1.71      13141.82  organic  2018     CincinnatiDayton"
                    },
                    "execution_count": 55,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "condition = (df['Date'] == '2018-01-07') \u0026 (df['type'] == 'organic')\n",
                "df[condition].sort_values(by='region').head(10)"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Sorting can use more columns using a python list with some parameters.  "
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 56,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "\u003cdiv\u003e\n\u003cstyle scoped\u003e\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\u003c/style\u003e\n\u003ctable border=\"1\" class=\"dataframe\"\u003e\n  \u003cthead\u003e\n    \u003ctr style=\"text-align: right;\"\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003eDate\u003c/th\u003e\n      \u003cth\u003eAveragePrice\u003c/th\u003e\n      \u003cth\u003eTotal Volume\u003c/th\u003e\n      \u003cth\u003etype\u003c/th\u003e\n      \u003cth\u003eyear\u003c/th\u003e\n      \u003cth\u003eregion\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003cth\u003e11\u003c/th\u003e\n      \u003ctd\u003e2018-01-07\u003c/td\u003e\n      \u003ctd\u003e1.54\u003c/td\u003e\n      \u003ctd\u003e4816.90\u003c/td\u003e\n      \u003ctd\u003eorganic\u003c/td\u003e\n      \u003ctd\u003e2018\u003c/td\u003e\n      \u003ctd\u003eAlbany\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e11\u003c/th\u003e\n      \u003ctd\u003e2018-01-07\u003c/td\u003e\n      \u003ctd\u003e1.53\u003c/td\u003e\n      \u003ctd\u003e15714.11\u003c/td\u003e\n      \u003ctd\u003eorganic\u003c/td\u003e\n      \u003ctd\u003e2018\u003c/td\u003e\n      \u003ctd\u003eAtlanta\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e11\u003c/th\u003e\n      \u003ctd\u003e2018-01-07\u003c/td\u003e\n      \u003ctd\u003e1.15\u003c/td\u003e\n      \u003ctd\u003e82282.71\u003c/td\u003e\n      \u003ctd\u003eorganic\u003c/td\u003e\n      \u003ctd\u003e2018\u003c/td\u003e\n      \u003ctd\u003eBaltimoreWashington\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e11\u003c/th\u003e\n      \u003ctd\u003e2018-01-07\u003c/td\u003e\n      \u003ctd\u003e1.77\u003c/td\u003e\n      \u003ctd\u003e2553.90\u003c/td\u003e\n      \u003ctd\u003eorganic\u003c/td\u003e\n      \u003ctd\u003e2018\u003c/td\u003e\n      \u003ctd\u003eBoise\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e11\u003c/th\u003e\n      \u003ctd\u003e2018-01-07\u003c/td\u003e\n      \u003ctd\u003e1.91\u003c/td\u003e\n      \u003ctd\u003e30096.00\u003c/td\u003e\n      \u003ctd\u003eorganic\u003c/td\u003e\n      \u003ctd\u003e2018\u003c/td\u003e\n      \u003ctd\u003eBoston\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e",
                        "text/plain": "         Date  AveragePrice  Total Volume     type  year               region\n11 2018-01-07          1.54       4816.90  organic  2018               Albany\n11 2018-01-07          1.53      15714.11  organic  2018              Atlanta\n11 2018-01-07          1.15      82282.71  organic  2018  BaltimoreWashington\n11 2018-01-07          1.77       2553.90  organic  2018                Boise\n11 2018-01-07          1.91      30096.00  organic  2018               Boston"
                    },
                    "execution_count": 56,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df[condition].sort_values(by=['region', 'AveragePrice'], ascending=[True, False]).head()"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "**sort_index**: Sort object by labels (along an axis)\n",
                "```python\n",
                "df.sort_index(axis=0, level=None, ascending=True, inplace=False, kind='quicksort', na_position='last', sort_remaining=True, ignore_index=False, key=None)\n",
                "```\n",
                "Next cell sort rows based on the index values (in ascending order)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 57,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "\u003cdiv\u003e\n\u003cstyle scoped\u003e\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\u003c/style\u003e\n\u003ctable border=\"1\" class=\"dataframe\"\u003e\n  \u003cthead\u003e\n    \u003ctr style=\"text-align: right;\"\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003eDate\u003c/th\u003e\n      \u003cth\u003eAveragePrice\u003c/th\u003e\n      \u003cth\u003eTotal Volume\u003c/th\u003e\n      \u003cth\u003etype\u003c/th\u003e\n      \u003cth\u003eyear\u003c/th\u003e\n      \u003cth\u003eregion\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003cth\u003e0\u003c/th\u003e\n      \u003ctd\u003e2015-12-27\u003c/td\u003e\n      \u003ctd\u003e1.33\u003c/td\u003e\n      \u003ctd\u003e64236.62\u003c/td\u003e\n      \u003ctd\u003econventional\u003c/td\u003e\n      \u003ctd\u003e2015\u003c/td\u003e\n      \u003ctd\u003eAlbany\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e0\u003c/th\u003e\n      \u003ctd\u003e2016-12-25\u003c/td\u003e\n      \u003ctd\u003e1.85\u003c/td\u003e\n      \u003ctd\u003e8657.87\u003c/td\u003e\n      \u003ctd\u003eorganic\u003c/td\u003e\n      \u003ctd\u003e2016\u003c/td\u003e\n      \u003ctd\u003ePhoenixTucson\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e0\u003c/th\u003e\n      \u003ctd\u003e2015-12-27\u003c/td\u003e\n      \u003ctd\u003e1.25\u003c/td\u003e\n      \u003ctd\u003e73109.90\u003c/td\u003e\n      \u003ctd\u003econventional\u003c/td\u003e\n      \u003ctd\u003e2015\u003c/td\u003e\n      \u003ctd\u003ePittsburgh\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e0\u003c/th\u003e\n      \u003ctd\u003e2016-12-25\u003c/td\u003e\n      \u003ctd\u003e1.90\u003c/td\u003e\n      \u003ctd\u003e11376.97\u003c/td\u003e\n      \u003ctd\u003eorganic\u003c/td\u003e\n      \u003ctd\u003e2016\u003c/td\u003e\n      \u003ctd\u003ePhiladelphia\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e0\u003c/th\u003e\n      \u003ctd\u003e2016-12-25\u003c/td\u003e\n      \u003ctd\u003e1.27\u003c/td\u003e\n      \u003ctd\u003e5601.65\u003c/td\u003e\n      \u003ctd\u003eorganic\u003c/td\u003e\n      \u003ctd\u003e2016\u003c/td\u003e\n      \u003ctd\u003eOrlando\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e...\u003c/th\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e52\u003c/th\u003e\n      \u003ctd\u003e2017-01-01\u003c/td\u003e\n      \u003ctd\u003e2.06\u003c/td\u003e\n      \u003ctd\u003e39260.55\u003c/td\u003e\n      \u003ctd\u003eorganic\u003c/td\u003e\n      \u003ctd\u003e2017\u003c/td\u003e\n      \u003ctd\u003eNewYork\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e52\u003c/th\u003e\n      \u003ctd\u003e2017-01-01\u003c/td\u003e\n      \u003ctd\u003e1.11\u003c/td\u003e\n      \u003ctd\u003e476239.03\u003c/td\u003e\n      \u003ctd\u003econventional\u003c/td\u003e\n      \u003ctd\u003e2017\u003c/td\u003e\n      \u003ctd\u003eNorthernNewEngland\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e52\u003c/th\u003e\n      \u003ctd\u003e2017-01-01\u003c/td\u003e\n      \u003ctd\u003e2.00\u003c/td\u003e\n      \u003ctd\u003e115256.09\u003c/td\u003e\n      \u003ctd\u003eorganic\u003c/td\u003e\n      \u003ctd\u003e2017\u003c/td\u003e\n      \u003ctd\u003eNortheast\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e52\u003c/th\u003e\n      \u003ctd\u003e2017-01-01\u003c/td\u003e\n      \u003ctd\u003e0.93\u003c/td\u003e\n      \u003ctd\u003e547565.88\u003c/td\u003e\n      \u003ctd\u003econventional\u003c/td\u003e\n      \u003ctd\u003e2017\u003c/td\u003e\n      \u003ctd\u003eAtlanta\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e52\u003c/th\u003e\n      \u003ctd\u003e2017-01-01\u003c/td\u003e\n      \u003ctd\u003e0.97\u003c/td\u003e\n      \u003ctd\u003e142347.90\u003c/td\u003e\n      \u003ctd\u003econventional\u003c/td\u003e\n      \u003ctd\u003e2017\u003c/td\u003e\n      \u003ctd\u003eRoanoke\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e18249 rows × 6 columns\u003c/p\u003e\n\u003c/div\u003e",
                        "text/plain": "         Date  AveragePrice  Total Volume          type  year  \\\n0  2015-12-27          1.33      64236.62  conventional  2015   \n0  2016-12-25          1.85       8657.87       organic  2016   \n0  2015-12-27          1.25      73109.90  conventional  2015   \n0  2016-12-25          1.90      11376.97       organic  2016   \n0  2016-12-25          1.27       5601.65       organic  2016   \n..        ...           ...           ...           ...   ...   \n52 2017-01-01          2.06      39260.55       organic  2017   \n52 2017-01-01          1.11     476239.03  conventional  2017   \n52 2017-01-01          2.00     115256.09       organic  2017   \n52 2017-01-01          0.93     547565.88  conventional  2017   \n52 2017-01-01          0.97     142347.90  conventional  2017   \n\n                region  \n0               Albany  \n0        PhoenixTucson  \n0           Pittsburgh  \n0         Philadelphia  \n0              Orlando  \n..                 ...  \n52             NewYork  \n52  NorthernNewEngland  \n52           Northeast  \n52             Atlanta  \n52             Roanoke  \n\n[18249 rows x 6 columns]"
                    },
                    "execution_count": 57,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df.sort_index()"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# Renaming\n",
                "\n",
                "It's very common to rename things for convenience. In example, when column names are too long or use special characters it could come in handy to short them. The method [`rename()`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.rename.html) is a great tool to help us in many situations.\n",
                "\n",
                "Let's see a simple example"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 58,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "\u003cdiv\u003e\n\u003cstyle scoped\u003e\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\u003c/style\u003e\n\u003ctable border=\"1\" class=\"dataframe\"\u003e\n  \u003cthead\u003e\n    \u003ctr style=\"text-align: right;\"\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003eDate\u003c/th\u003e\n      \u003cth\u003eprice\u003c/th\u003e\n      \u003cth\u003evolume\u003c/th\u003e\n      \u003cth\u003etype\u003c/th\u003e\n      \u003cth\u003eyear\u003c/th\u003e\n      \u003cth\u003eregion\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003cth\u003e0\u003c/th\u003e\n      \u003ctd\u003e2015-12-27\u003c/td\u003e\n      \u003ctd\u003e1.33\u003c/td\u003e\n      \u003ctd\u003e64236.62\u003c/td\u003e\n      \u003ctd\u003econventional\u003c/td\u003e\n      \u003ctd\u003e2015\u003c/td\u003e\n      \u003ctd\u003eAlbany\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e1\u003c/th\u003e\n      \u003ctd\u003e2015-12-20\u003c/td\u003e\n      \u003ctd\u003e1.35\u003c/td\u003e\n      \u003ctd\u003e54876.98\u003c/td\u003e\n      \u003ctd\u003econventional\u003c/td\u003e\n      \u003ctd\u003e2015\u003c/td\u003e\n      \u003ctd\u003eAlbany\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e2\u003c/th\u003e\n      \u003ctd\u003e2015-12-13\u003c/td\u003e\n      \u003ctd\u003e0.93\u003c/td\u003e\n      \u003ctd\u003e118220.22\u003c/td\u003e\n      \u003ctd\u003econventional\u003c/td\u003e\n      \u003ctd\u003e2015\u003c/td\u003e\n      \u003ctd\u003eAlbany\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e3\u003c/th\u003e\n      \u003ctd\u003e2015-12-06\u003c/td\u003e\n      \u003ctd\u003e1.08\u003c/td\u003e\n      \u003ctd\u003e78992.15\u003c/td\u003e\n      \u003ctd\u003econventional\u003c/td\u003e\n      \u003ctd\u003e2015\u003c/td\u003e\n      \u003ctd\u003eAlbany\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e4\u003c/th\u003e\n      \u003ctd\u003e2015-11-29\u003c/td\u003e\n      \u003ctd\u003e1.28\u003c/td\u003e\n      \u003ctd\u003e51039.60\u003c/td\u003e\n      \u003ctd\u003econventional\u003c/td\u003e\n      \u003ctd\u003e2015\u003c/td\u003e\n      \u003ctd\u003eAlbany\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e...\u003c/th\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e7\u003c/th\u003e\n      \u003ctd\u003e2018-02-04\u003c/td\u003e\n      \u003ctd\u003e1.63\u003c/td\u003e\n      \u003ctd\u003e17074.83\u003c/td\u003e\n      \u003ctd\u003eorganic\u003c/td\u003e\n      \u003ctd\u003e2018\u003c/td\u003e\n      \u003ctd\u003eWestTexNewMexico\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e8\u003c/th\u003e\n      \u003ctd\u003e2018-01-28\u003c/td\u003e\n      \u003ctd\u003e1.71\u003c/td\u003e\n      \u003ctd\u003e13888.04\u003c/td\u003e\n      \u003ctd\u003eorganic\u003c/td\u003e\n      \u003ctd\u003e2018\u003c/td\u003e\n      \u003ctd\u003eWestTexNewMexico\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e9\u003c/th\u003e\n      \u003ctd\u003e2018-01-21\u003c/td\u003e\n      \u003ctd\u003e1.87\u003c/td\u003e\n      \u003ctd\u003e13766.76\u003c/td\u003e\n      \u003ctd\u003eorganic\u003c/td\u003e\n      \u003ctd\u003e2018\u003c/td\u003e\n      \u003ctd\u003eWestTexNewMexico\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e10\u003c/th\u003e\n      \u003ctd\u003e2018-01-14\u003c/td\u003e\n      \u003ctd\u003e1.93\u003c/td\u003e\n      \u003ctd\u003e16205.22\u003c/td\u003e\n      \u003ctd\u003eorganic\u003c/td\u003e\n      \u003ctd\u003e2018\u003c/td\u003e\n      \u003ctd\u003eWestTexNewMexico\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e11\u003c/th\u003e\n      \u003ctd\u003e2018-01-07\u003c/td\u003e\n      \u003ctd\u003e1.62\u003c/td\u003e\n      \u003ctd\u003e17489.58\u003c/td\u003e\n      \u003ctd\u003eorganic\u003c/td\u003e\n      \u003ctd\u003e2018\u003c/td\u003e\n      \u003ctd\u003eWestTexNewMexico\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e18249 rows × 6 columns\u003c/p\u003e\n\u003c/div\u003e",
                        "text/plain": "         Date  price     volume          type  year            region\n0  2015-12-27   1.33   64236.62  conventional  2015            Albany\n1  2015-12-20   1.35   54876.98  conventional  2015            Albany\n2  2015-12-13   0.93  118220.22  conventional  2015            Albany\n3  2015-12-06   1.08   78992.15  conventional  2015            Albany\n4  2015-11-29   1.28   51039.60  conventional  2015            Albany\n..        ...    ...        ...           ...   ...               ...\n7  2018-02-04   1.63   17074.83       organic  2018  WestTexNewMexico\n8  2018-01-28   1.71   13888.04       organic  2018  WestTexNewMexico\n9  2018-01-21   1.87   13766.76       organic  2018  WestTexNewMexico\n10 2018-01-14   1.93   16205.22       organic  2018  WestTexNewMexico\n11 2018-01-07   1.62   17489.58       organic  2018  WestTexNewMexico\n\n[18249 rows x 6 columns]"
                    },
                    "execution_count": 58,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df.rename(columns={'AveragePrice': 'price', 'Total Volume': 'volume'}, inplace=True)\n",
                "df"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# Counting\n",
                "\n",
                "**Counting number of values without NaNs**  \n",
                "We already saw different ways to access to the number of rows. But what if you want to count the number of rows with not NaN values? The `count()` method counts non-NA cells for each column or row"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 59,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "Date      18249\nprice     18249\nvolume    18249\ntype      18249\nyear      18249\nregion    18249\ndtype: int64"
                    },
                    "execution_count": 59,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df.count()"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "**Counting number of unique values per column (Series) in the DataFrame**  \n",
                "Number of unique for one Series"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 60,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "54"
                    },
                    "execution_count": 60,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df.region.nunique()"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Number of unique values for every Series in the DataFrame"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 61,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "Date        169\nprice       259\nvolume    18237\ntype          2\nyear          4\nregion       54\ndtype: int64"
                    },
                    "execution_count": 61,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df.nunique()"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "**Unique values**"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 62,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "array(['conventional', 'organic'], dtype=object)"
                    },
                    "execution_count": 62,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df['type'].unique()"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Remember that we can easily change a DataFrame or Series output into a python list"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 63,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "['conventional', 'organic']"
                    },
                    "execution_count": 63,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df['type'].unique().tolist()"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "**Counting rows based on unique values**\n",
                "\n",
                "`value_counts()` return a Series containing counts of unique rows in the DataFrame\n",
                "```python\n",
                "DataFrame.value_counts(subset=None, normalize=False, sort=True, ascending=False, dropna=True)\n",
                "```\n",
                "This method is simple but powerful for simple exploration. Let's look some examples"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 64,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "type\nconventional    9126\norganic         9123\ndtype: int64"
                    },
                    "execution_count": 64,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df.value_counts(subset='type')"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 65,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "year\n2015    5615\n2016    5616\n2017    5722\n2018    1296\ndtype: int64"
                    },
                    "execution_count": 65,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df.value_counts(subset='year', sort=False)"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "We can use a bigger subset for a more detailed view"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 66,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "year  type        \n2015  conventional    2808\n      organic         2807\n2016  conventional    2808\n      organic         2808\n2017  conventional    2862\n      organic         2860\n2018  conventional     648\n      organic          648\ndtype: int64"
                    },
                    "execution_count": 66,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df.value_counts(subset=['year', 'type'], sort=False)"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "And we just need add one more flag to access to the same but normalized values"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 67,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "year  type        \n2015  conventional    15.387145\n      organic         15.381665\n2016  conventional    15.387145\n      organic         15.387145\n2017  conventional    15.683051\n      organic         15.672092\n2018  conventional     3.550880\n      organic          3.550880\ndtype: float64"
                    },
                    "execution_count": 67,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df.value_counts(subset=['year', 'type'], sort=False, normalize=True)*100"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# Grouping\n",
                "\n",
                "Have you been looking for power: meet `groupby()`\n",
                "\n",
                "A groupby operation involves some combination of splitting the object, applying a function, and combining the results. This can be used to group large amounts of data and compute operations on these groups.\n",
                "\n",
                "```python\n",
                "DataFrame.groupby(by=None, axis=0, level=None, as_index=True, sort=True,\n",
                "                  group_keys=True, squeeze=\u003cno_default\u003e, observed=False, dropna=True)\n",
                "```"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Next cell mimics in some way the value_counts() behaviour.\n",
                "- Split dataset into subdaframes where each subdataframe.year is unique \n",
                "- Count the number of rows without NaNs for every column"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 68,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "\u003cdiv\u003e\n\u003cstyle scoped\u003e\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\u003c/style\u003e\n\u003ctable border=\"1\" class=\"dataframe\"\u003e\n  \u003cthead\u003e\n    \u003ctr style=\"text-align: right;\"\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003eDate\u003c/th\u003e\n      \u003cth\u003eprice\u003c/th\u003e\n      \u003cth\u003evolume\u003c/th\u003e\n      \u003cth\u003etype\u003c/th\u003e\n      \u003cth\u003eregion\u003c/th\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003eyear\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003cth\u003e2015\u003c/th\u003e\n      \u003ctd\u003e5615\u003c/td\u003e\n      \u003ctd\u003e5615\u003c/td\u003e\n      \u003ctd\u003e5615\u003c/td\u003e\n      \u003ctd\u003e5615\u003c/td\u003e\n      \u003ctd\u003e5615\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e2016\u003c/th\u003e\n      \u003ctd\u003e5616\u003c/td\u003e\n      \u003ctd\u003e5616\u003c/td\u003e\n      \u003ctd\u003e5616\u003c/td\u003e\n      \u003ctd\u003e5616\u003c/td\u003e\n      \u003ctd\u003e5616\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e2017\u003c/th\u003e\n      \u003ctd\u003e5722\u003c/td\u003e\n      \u003ctd\u003e5722\u003c/td\u003e\n      \u003ctd\u003e5722\u003c/td\u003e\n      \u003ctd\u003e5722\u003c/td\u003e\n      \u003ctd\u003e5722\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e2018\u003c/th\u003e\n      \u003ctd\u003e1296\u003c/td\u003e\n      \u003ctd\u003e1296\u003c/td\u003e\n      \u003ctd\u003e1296\u003c/td\u003e\n      \u003ctd\u003e1296\u003c/td\u003e\n      \u003ctd\u003e1296\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e",
                        "text/plain": "      Date  price  volume  type  region\nyear                                   \n2015  5615   5615    5615  5615    5615\n2016  5616   5616    5616  5616    5616\n2017  5722   5722    5722  5722    5722\n2018  1296   1296    1296  1296    1296"
                    },
                    "execution_count": 68,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df.groupby('year').count()"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "The above rows present the same values because the original dataset is free of NaN values. It's a great dataset: No NaNs and Avocados everywhere.\n",
                "\n",
                "## Functions\n",
                "\n",
                "What about max()?"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 69,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "\u003cdiv\u003e\n\u003cstyle scoped\u003e\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\u003c/style\u003e\n\u003ctable border=\"1\" class=\"dataframe\"\u003e\n  \u003cthead\u003e\n    \u003ctr style=\"text-align: right;\"\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003eDate\u003c/th\u003e\n      \u003cth\u003eprice\u003c/th\u003e\n      \u003cth\u003evolume\u003c/th\u003e\n      \u003cth\u003etype\u003c/th\u003e\n      \u003cth\u003eregion\u003c/th\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003eyear\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003cth\u003e2015\u003c/th\u003e\n      \u003ctd\u003e2015-12-27\u003c/td\u003e\n      \u003ctd\u003e2.79\u003c/td\u003e\n      \u003ctd\u003e44655461.51\u003c/td\u003e\n      \u003ctd\u003eorganic\u003c/td\u003e\n      \u003ctd\u003eWestTexNewMexico\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e2016\u003c/th\u003e\n      \u003ctd\u003e2016-12-25\u003c/td\u003e\n      \u003ctd\u003e3.25\u003c/td\u003e\n      \u003ctd\u003e52288697.89\u003c/td\u003e\n      \u003ctd\u003eorganic\u003c/td\u003e\n      \u003ctd\u003eWestTexNewMexico\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e2017\u003c/th\u003e\n      \u003ctd\u003e2017-12-31\u003c/td\u003e\n      \u003ctd\u003e3.17\u003c/td\u003e\n      \u003ctd\u003e61034457.10\u003c/td\u003e\n      \u003ctd\u003eorganic\u003c/td\u003e\n      \u003ctd\u003eWestTexNewMexico\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e2018\u003c/th\u003e\n      \u003ctd\u003e2018-03-25\u003c/td\u003e\n      \u003ctd\u003e2.30\u003c/td\u003e\n      \u003ctd\u003e62505646.52\u003c/td\u003e\n      \u003ctd\u003eorganic\u003c/td\u003e\n      \u003ctd\u003eWestTexNewMexico\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e",
                        "text/plain": "           Date  price       volume     type            region\nyear                                                          \n2015 2015-12-27   2.79  44655461.51  organic  WestTexNewMexico\n2016 2016-12-25   3.25  52288697.89  organic  WestTexNewMexico\n2017 2017-12-31   3.17  61034457.10  organic  WestTexNewMexico\n2018 2018-03-25   2.30  62505646.52  organic  WestTexNewMexico"
                    },
                    "execution_count": 69,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df.groupby('year').max()"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "And mean()?"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 70,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "\u003cdiv\u003e\n\u003cstyle scoped\u003e\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\u003c/style\u003e\n\u003ctable border=\"1\" class=\"dataframe\"\u003e\n  \u003cthead\u003e\n    \u003ctr style=\"text-align: right;\"\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003eprice\u003c/th\u003e\n      \u003cth\u003evolume\u003c/th\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003eyear\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003cth\u003e2015\u003c/th\u003e\n      \u003ctd\u003e1.375590\u003c/td\u003e\n      \u003ctd\u003e7.810274e+05\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e2016\u003c/th\u003e\n      \u003ctd\u003e1.338640\u003c/td\u003e\n      \u003ctd\u003e8.584206e+05\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e2017\u003c/th\u003e\n      \u003ctd\u003e1.515128\u003c/td\u003e\n      \u003ctd\u003e8.623393e+05\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e2018\u003c/th\u003e\n      \u003ctd\u003e1.347531\u003c/td\u003e\n      \u003ctd\u003e1.066928e+06\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e",
                        "text/plain": "         price        volume\nyear                        \n2015  1.375590  7.810274e+05\n2016  1.338640  8.584206e+05\n2017  1.515128  8.623393e+05\n2018  1.347531  1.066928e+06"
                    },
                    "execution_count": 70,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df.groupby('year').mean()"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Do you find something different between using max and mean? What are your thoughts?"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 74,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "\u003cdiv\u003e\n\u003cstyle scoped\u003e\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n\u003c/style\u003e\n\u003ctable border=\"1\" class=\"dataframe\"\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth colspan=\"8\" halign=\"left\"\u003eprice\u003c/th\u003e\n      \u003cth colspan=\"8\" halign=\"left\"\u003evolume\u003c/th\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003ecount\u003c/th\u003e\n      \u003cth\u003emean\u003c/th\u003e\n      \u003cth\u003estd\u003c/th\u003e\n      \u003cth\u003emin\u003c/th\u003e\n      \u003cth\u003e25%\u003c/th\u003e\n      \u003cth\u003e50%\u003c/th\u003e\n      \u003cth\u003e75%\u003c/th\u003e\n      \u003cth\u003emax\u003c/th\u003e\n      \u003cth\u003ecount\u003c/th\u003e\n      \u003cth\u003emean\u003c/th\u003e\n      \u003cth\u003estd\u003c/th\u003e\n      \u003cth\u003emin\u003c/th\u003e\n      \u003cth\u003e25%\u003c/th\u003e\n      \u003cth\u003e50%\u003c/th\u003e\n      \u003cth\u003e75%\u003c/th\u003e\n      \u003cth\u003emax\u003c/th\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003eyear\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003cth\u003e2015\u003c/th\u003e\n      \u003ctd\u003e5615.0\u003c/td\u003e\n      \u003ctd\u003e1.375590\u003c/td\u003e\n      \u003ctd\u003e0.375595\u003c/td\u003e\n      \u003ctd\u003e0.49\u003c/td\u003e\n      \u003ctd\u003e1.07\u003c/td\u003e\n      \u003ctd\u003e1.300\u003c/td\u003e\n      \u003ctd\u003e1.67\u003c/td\u003e\n      \u003ctd\u003e2.79\u003c/td\u003e\n      \u003ctd\u003e5615.0\u003c/td\u003e\n      \u003ctd\u003e7.810274e+05\u003c/td\u003e\n      \u003ctd\u003e3.171256e+06\u003c/td\u003e\n      \u003ctd\u003e84.56\u003c/td\u003e\n      \u003ctd\u003e6931.6300\u003c/td\u003e\n      \u003ctd\u003e76146.82\u003c/td\u003e\n      \u003ctd\u003e400176.6800\u003c/td\u003e\n      \u003ctd\u003e44655461.51\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e2016\u003c/th\u003e\n      \u003ctd\u003e5616.0\u003c/td\u003e\n      \u003ctd\u003e1.338640\u003c/td\u003e\n      \u003ctd\u003e0.393708\u003c/td\u003e\n      \u003ctd\u003e0.51\u003c/td\u003e\n      \u003ctd\u003e1.04\u003c/td\u003e\n      \u003ctd\u003e1.300\u003c/td\u003e\n      \u003ctd\u003e1.56\u003c/td\u003e\n      \u003ctd\u003e3.25\u003c/td\u003e\n      \u003ctd\u003e5616.0\u003c/td\u003e\n      \u003ctd\u003e8.584206e+05\u003c/td\u003e\n      \u003ctd\u003e3.478732e+06\u003c/td\u003e\n      \u003ctd\u003e385.55\u003c/td\u003e\n      \u003ctd\u003e10643.6850\u003c/td\u003e\n      \u003ctd\u003e109597.29\u003c/td\u003e\n      \u003ctd\u003e451107.2925\u003c/td\u003e\n      \u003ctd\u003e52288697.89\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e2017\u003c/th\u003e\n      \u003ctd\u003e5722.0\u003c/td\u003e\n      \u003ctd\u003e1.515128\u003c/td\u003e\n      \u003ctd\u003e0.432906\u003c/td\u003e\n      \u003ctd\u003e0.44\u003c/td\u003e\n      \u003ctd\u003e1.22\u003c/td\u003e\n      \u003ctd\u003e1.490\u003c/td\u003e\n      \u003ctd\u003e1.77\u003c/td\u003e\n      \u003ctd\u003e3.17\u003c/td\u003e\n      \u003ctd\u003e5722.0\u003c/td\u003e\n      \u003ctd\u003e8.623393e+05\u003c/td\u003e\n      \u003ctd\u003e3.481957e+06\u003c/td\u003e\n      \u003ctd\u003e515.01\u003c/td\u003e\n      \u003ctd\u003e13790.6975\u003c/td\u003e\n      \u003ctd\u003e122915.75\u003c/td\u003e\n      \u003ctd\u003e426454.5125\u003c/td\u003e\n      \u003ctd\u003e61034457.10\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e2018\u003c/th\u003e\n      \u003ctd\u003e1296.0\u003c/td\u003e\n      \u003ctd\u003e1.347531\u003c/td\u003e\n      \u003ctd\u003e0.305858\u003c/td\u003e\n      \u003ctd\u003e0.56\u003c/td\u003e\n      \u003ctd\u003e1.13\u003c/td\u003e\n      \u003ctd\u003e1.345\u003c/td\u003e\n      \u003ctd\u003e1.56\u003c/td\u003e\n      \u003ctd\u003e2.30\u003c/td\u003e\n      \u003ctd\u003e1296.0\u003c/td\u003e\n      \u003ctd\u003e1.066928e+06\u003c/td\u003e\n      \u003ctd\u003e4.285501e+06\u003c/td\u003e\n      \u003ctd\u003e2064.90\u003c/td\u003e\n      \u003ctd\u003e17690.9825\u003c/td\u003e\n      \u003ctd\u003e157175.09\u003c/td\u003e\n      \u003ctd\u003e529462.2450\u003c/td\u003e\n      \u003ctd\u003e62505646.52\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e",
                        "text/plain": "       price                                                     volume  \\\n       count      mean       std   min   25%    50%   75%   max   count   \nyear                                                                      \n2015  5615.0  1.375590  0.375595  0.49  1.07  1.300  1.67  2.79  5615.0   \n2016  5616.0  1.338640  0.393708  0.51  1.04  1.300  1.56  3.25  5616.0   \n2017  5722.0  1.515128  0.432906  0.44  1.22  1.490  1.77  3.17  5722.0   \n2018  1296.0  1.347531  0.305858  0.56  1.13  1.345  1.56  2.30  1296.0   \n\n                                                                               \\\n              mean           std      min         25%        50%          75%   \nyear                                                                            \n2015  7.810274e+05  3.171256e+06    84.56   6931.6300   76146.82  400176.6800   \n2016  8.584206e+05  3.478732e+06   385.55  10643.6850  109597.29  451107.2925   \n2017  8.623393e+05  3.481957e+06   515.01  13790.6975  122915.75  426454.5125   \n2018  1.066928e+06  4.285501e+06  2064.90  17690.9825  157175.09  529462.2450   \n\n                   \n              max  \nyear               \n2015  44655461.51  \n2016  52288697.89  \n2017  61034457.10  \n2018  62505646.52  "
                    },
                    "execution_count": 74,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df.groupby('year').describe()"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "There exist other methods that can be chain to gropuby(). In example first and last will return the first and the last row of each group respectivily."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 78,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "\u003cdiv\u003e\n\u003cstyle scoped\u003e\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\u003c/style\u003e\n\u003ctable border=\"1\" class=\"dataframe\"\u003e\n  \u003cthead\u003e\n    \u003ctr style=\"text-align: right;\"\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003eDate\u003c/th\u003e\n      \u003cth\u003eprice\u003c/th\u003e\n      \u003cth\u003evolume\u003c/th\u003e\n      \u003cth\u003etype\u003c/th\u003e\n      \u003cth\u003eregion\u003c/th\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003eyear\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003cth\u003e2015\u003c/th\u003e\n      \u003ctd\u003e2015-12-27\u003c/td\u003e\n      \u003ctd\u003e1.33\u003c/td\u003e\n      \u003ctd\u003e64236.62\u003c/td\u003e\n      \u003ctd\u003econventional\u003c/td\u003e\n      \u003ctd\u003eAlbany\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e2016\u003c/th\u003e\n      \u003ctd\u003e2016-12-25\u003c/td\u003e\n      \u003ctd\u003e1.52\u003c/td\u003e\n      \u003ctd\u003e73341.73\u003c/td\u003e\n      \u003ctd\u003econventional\u003c/td\u003e\n      \u003ctd\u003eAlbany\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e2017\u003c/th\u003e\n      \u003ctd\u003e2017-12-31\u003c/td\u003e\n      \u003ctd\u003e1.47\u003c/td\u003e\n      \u003ctd\u003e113514.42\u003c/td\u003e\n      \u003ctd\u003econventional\u003c/td\u003e\n      \u003ctd\u003eAlbany\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e2018\u003c/th\u003e\n      \u003ctd\u003e2018-03-25\u003c/td\u003e\n      \u003ctd\u003e1.57\u003c/td\u003e\n      \u003ctd\u003e149396.50\u003c/td\u003e\n      \u003ctd\u003econventional\u003c/td\u003e\n      \u003ctd\u003eAlbany\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e",
                        "text/plain": "           Date  price     volume          type  region\nyear                                                   \n2015 2015-12-27   1.33   64236.62  conventional  Albany\n2016 2016-12-25   1.52   73341.73  conventional  Albany\n2017 2017-12-31   1.47  113514.42  conventional  Albany\n2018 2018-03-25   1.57  149396.50  conventional  Albany"
                    },
                    "execution_count": 78,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df.groupby('year').first()"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Previous call is similar to using head, but head() keeps the group index where first set a new index: the year"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 85,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "\u003cdiv\u003e\n\u003cstyle scoped\u003e\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\u003c/style\u003e\n\u003ctable border=\"1\" class=\"dataframe\"\u003e\n  \u003cthead\u003e\n    \u003ctr style=\"text-align: right;\"\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003eDate\u003c/th\u003e\n      \u003cth\u003eprice\u003c/th\u003e\n      \u003cth\u003evolume\u003c/th\u003e\n      \u003cth\u003etype\u003c/th\u003e\n      \u003cth\u003eyear\u003c/th\u003e\n      \u003cth\u003eregion\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003cth\u003e0\u003c/th\u003e\n      \u003ctd\u003e2015-12-27\u003c/td\u003e\n      \u003ctd\u003e1.33\u003c/td\u003e\n      \u003ctd\u003e64236.62\u003c/td\u003e\n      \u003ctd\u003econventional\u003c/td\u003e\n      \u003ctd\u003e2015\u003c/td\u003e\n      \u003ctd\u003eAlbany\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e0\u003c/th\u003e\n      \u003ctd\u003e2016-12-25\u003c/td\u003e\n      \u003ctd\u003e1.52\u003c/td\u003e\n      \u003ctd\u003e73341.73\u003c/td\u003e\n      \u003ctd\u003econventional\u003c/td\u003e\n      \u003ctd\u003e2016\u003c/td\u003e\n      \u003ctd\u003eAlbany\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e0\u003c/th\u003e\n      \u003ctd\u003e2017-12-31\u003c/td\u003e\n      \u003ctd\u003e1.47\u003c/td\u003e\n      \u003ctd\u003e113514.42\u003c/td\u003e\n      \u003ctd\u003econventional\u003c/td\u003e\n      \u003ctd\u003e2017\u003c/td\u003e\n      \u003ctd\u003eAlbany\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e0\u003c/th\u003e\n      \u003ctd\u003e2018-03-25\u003c/td\u003e\n      \u003ctd\u003e1.57\u003c/td\u003e\n      \u003ctd\u003e149396.50\u003c/td\u003e\n      \u003ctd\u003econventional\u003c/td\u003e\n      \u003ctd\u003e2018\u003c/td\u003e\n      \u003ctd\u003eAlbany\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e",
                        "text/plain": "        Date  price     volume          type  year  region\n0 2015-12-27   1.33   64236.62  conventional  2015  Albany\n0 2016-12-25   1.52   73341.73  conventional  2016  Albany\n0 2017-12-31   1.47  113514.42  conventional  2017  Albany\n0 2018-03-25   1.57  149396.50  conventional  2018  Albany"
                    },
                    "execution_count": 85,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df.groupby('year').head(1)"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "### Aggregate\n",
                "\n",
                "`aggregate`: Aggregate using one or more operations over the specified axis (`agg` is an alias).\n",
                "\n",
                "Next cell shows the aggregated avocado price and volume values from year 2018"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 81,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "\u003cdiv\u003e\n\u003cstyle scoped\u003e\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\u003c/style\u003e\n\u003ctable border=\"1\" class=\"dataframe\"\u003e\n  \u003cthead\u003e\n    \u003ctr style=\"text-align: right;\"\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003eprice\u003c/th\u003e\n      \u003cth\u003evolume\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003cth\u003emin\u003c/th\u003e\n      \u003ctd\u003e0.560000\u003c/td\u003e\n      \u003ctd\u003e2.064900e+03\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003emean\u003c/th\u003e\n      \u003ctd\u003e1.347531\u003c/td\u003e\n      \u003ctd\u003e1.066928e+06\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003estd\u003c/th\u003e\n      \u003ctd\u003e0.305858\u003c/td\u003e\n      \u003ctd\u003e4.285501e+06\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003emax\u003c/th\u003e\n      \u003ctd\u003e2.300000\u003c/td\u003e\n      \u003ctd\u003e6.250565e+07\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e",
                        "text/plain": "         price        volume\nmin   0.560000  2.064900e+03\nmean  1.347531  1.066928e+06\nstd   0.305858  4.285501e+06\nmax   2.300000  6.250565e+07"
                    },
                    "execution_count": 81,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "condition = (df['year'] == 2018)\n",
                "df[condition][['price','volume']].agg(['min', 'mean', 'std', 'max'])"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "`aggregate` can be applied to dataframes though it can be chained with groupby()"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 86,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "\u003cdiv\u003e\n\u003cstyle scoped\u003e\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n\u003c/style\u003e\n\u003ctable border=\"1\" class=\"dataframe\"\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth colspan=\"4\" halign=\"left\"\u003eprice\u003c/th\u003e\n      \u003cth colspan=\"4\" halign=\"left\"\u003evolume\u003c/th\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003emin\u003c/th\u003e\n      \u003cth\u003emean\u003c/th\u003e\n      \u003cth\u003estd\u003c/th\u003e\n      \u003cth\u003emax\u003c/th\u003e\n      \u003cth\u003emin\u003c/th\u003e\n      \u003cth\u003emean\u003c/th\u003e\n      \u003cth\u003estd\u003c/th\u003e\n      \u003cth\u003emax\u003c/th\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003eyear\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003cth\u003e2015\u003c/th\u003e\n      \u003ctd\u003e0.49\u003c/td\u003e\n      \u003ctd\u003e1.375590\u003c/td\u003e\n      \u003ctd\u003e0.375595\u003c/td\u003e\n      \u003ctd\u003e2.79\u003c/td\u003e\n      \u003ctd\u003e84.56\u003c/td\u003e\n      \u003ctd\u003e7.810274e+05\u003c/td\u003e\n      \u003ctd\u003e3.171256e+06\u003c/td\u003e\n      \u003ctd\u003e44655461.51\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e2016\u003c/th\u003e\n      \u003ctd\u003e0.51\u003c/td\u003e\n      \u003ctd\u003e1.338640\u003c/td\u003e\n      \u003ctd\u003e0.393708\u003c/td\u003e\n      \u003ctd\u003e3.25\u003c/td\u003e\n      \u003ctd\u003e385.55\u003c/td\u003e\n      \u003ctd\u003e8.584206e+05\u003c/td\u003e\n      \u003ctd\u003e3.478732e+06\u003c/td\u003e\n      \u003ctd\u003e52288697.89\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e2017\u003c/th\u003e\n      \u003ctd\u003e0.44\u003c/td\u003e\n      \u003ctd\u003e1.515128\u003c/td\u003e\n      \u003ctd\u003e0.432906\u003c/td\u003e\n      \u003ctd\u003e3.17\u003c/td\u003e\n      \u003ctd\u003e515.01\u003c/td\u003e\n      \u003ctd\u003e8.623393e+05\u003c/td\u003e\n      \u003ctd\u003e3.481957e+06\u003c/td\u003e\n      \u003ctd\u003e61034457.10\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e2018\u003c/th\u003e\n      \u003ctd\u003e0.56\u003c/td\u003e\n      \u003ctd\u003e1.347531\u003c/td\u003e\n      \u003ctd\u003e0.305858\u003c/td\u003e\n      \u003ctd\u003e2.30\u003c/td\u003e\n      \u003ctd\u003e2064.90\u003c/td\u003e\n      \u003ctd\u003e1.066928e+06\u003c/td\u003e\n      \u003ctd\u003e4.285501e+06\u003c/td\u003e\n      \u003ctd\u003e62505646.52\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e",
                        "text/plain": "     price                             volume                              \\\n       min      mean       std   max      min          mean           std   \nyear                                                                        \n2015  0.49  1.375590  0.375595  2.79    84.56  7.810274e+05  3.171256e+06   \n2016  0.51  1.338640  0.393708  3.25   385.55  8.584206e+05  3.478732e+06   \n2017  0.44  1.515128  0.432906  3.17   515.01  8.623393e+05  3.481957e+06   \n2018  0.56  1.347531  0.305858  2.30  2064.90  1.066928e+06  4.285501e+06   \n\n                   \n              max  \nyear               \n2015  44655461.51  \n2016  52288697.89  \n2017  61034457.10  \n2018  62505646.52  "
                    },
                    "execution_count": 86,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df.groupby('year')[['price','volume']].agg(['min', 'mean', 'std', 'max'])"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Suppose you need a way to extract percentiles. The `quantile()` method can be applied directly on a dataframe to extract the thing you want."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 87,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "price        0.970\nvolume    8174.655\nName: 0.1, dtype: float64"
                    },
                    "execution_count": 87,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df[condition][['price', 'volume']].quantile(.10)"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "But there are cases where you need to extract more than that. For those cases it can be convenient to create custom methods to be used with aggregation."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 88,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "\u003cdiv\u003e\n\u003cstyle scoped\u003e\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\u003c/style\u003e\n\u003ctable border=\"1\" class=\"dataframe\"\u003e\n  \u003cthead\u003e\n    \u003ctr style=\"text-align: right;\"\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003eprice\u003c/th\u003e\n      \u003cth\u003evolume\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003cth\u003epercentil_10\u003c/th\u003e\n      \u003ctd\u003e0.970\u003c/td\u003e\n      \u003ctd\u003e8174.655\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003emedian\u003c/th\u003e\n      \u003ctd\u003e1.345\u003c/td\u003e\n      \u003ctd\u003e157175.090\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003epercentil_90\u003c/th\u003e\n      \u003ctd\u003e1.750\u003c/td\u003e\n      \u003ctd\u003e1810981.615\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e",
                        "text/plain": "              price       volume\npercentil_10  0.970     8174.655\nmedian        1.345   157175.090\npercentil_90  1.750  1810981.615"
                    },
                    "execution_count": 88,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "def percentil_10(x): return x.quantile(.10)\n",
                "def percentil_90(x): return x.quantile(.90)\n",
                "\n",
                "df[condition][['price','volume']].agg([percentil_10, 'median', percentil_90])"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 89,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "\u003cdiv\u003e\n\u003cstyle scoped\u003e\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n\u003c/style\u003e\n\u003ctable border=\"1\" class=\"dataframe\"\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth colspan=\"3\" halign=\"left\"\u003eprice\u003c/th\u003e\n      \u003cth colspan=\"3\" halign=\"left\"\u003evolume\u003c/th\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003epercentil_10\u003c/th\u003e\n      \u003cth\u003emedian\u003c/th\u003e\n      \u003cth\u003epercentil_90\u003c/th\u003e\n      \u003cth\u003epercentil_10\u003c/th\u003e\n      \u003cth\u003emedian\u003c/th\u003e\n      \u003cth\u003epercentil_90\u003c/th\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003eyear\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003cth\u003e2015\u003c/th\u003e\n      \u003ctd\u003e0.96\u003c/td\u003e\n      \u003ctd\u003e1.300\u003c/td\u003e\n      \u003ctd\u003e1.90\u003c/td\u003e\n      \u003ctd\u003e2431.434\u003c/td\u003e\n      \u003ctd\u003e76146.82\u003c/td\u003e\n      \u003ctd\u003e1285267.958\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e2016\u003c/th\u003e\n      \u003ctd\u003e0.88\u003c/td\u003e\n      \u003ctd\u003e1.300\u003c/td\u003e\n      \u003ctd\u003e1.86\u003c/td\u003e\n      \u003ctd\u003e4146.935\u003c/td\u003e\n      \u003ctd\u003e109597.29\u003c/td\u003e\n      \u003ctd\u003e1351865.735\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e2017\u003c/th\u003e\n      \u003ctd\u003e0.98\u003c/td\u003e\n      \u003ctd\u003e1.490\u003c/td\u003e\n      \u003ctd\u003e2.07\u003c/td\u003e\n      \u003ctd\u003e5889.687\u003c/td\u003e\n      \u003ctd\u003e122915.75\u003c/td\u003e\n      \u003ctd\u003e1398304.817\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e2018\u003c/th\u003e\n      \u003ctd\u003e0.97\u003c/td\u003e\n      \u003ctd\u003e1.345\u003c/td\u003e\n      \u003ctd\u003e1.75\u003c/td\u003e\n      \u003ctd\u003e8174.655\u003c/td\u003e\n      \u003ctd\u003e157175.09\u003c/td\u003e\n      \u003ctd\u003e1810981.615\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e",
                        "text/plain": "            price                           volume                        \n     percentil_10 median percentil_90 percentil_10     median percentil_90\nyear                                                                      \n2015         0.96  1.300         1.90     2431.434   76146.82  1285267.958\n2016         0.88  1.300         1.86     4146.935  109597.29  1351865.735\n2017         0.98  1.490         2.07     5889.687  122915.75  1398304.817\n2018         0.97  1.345         1.75     8174.655  157175.09  1810981.615"
                    },
                    "execution_count": 89,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "df.groupby('year')[['price','volume']].agg([percentil_10, 'median', percentil_90])"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# Summary\n",
                "\n",
                "In this lecture you've learnt:\n",
                "- How to install pandas\n",
                "- About pandas\n",
                "- What are Series and DataFrame data structures\n",
                "- How to create a simple DataFrame\n",
                "- How to load a DataFrame with an external data source\n",
                "- How to access column Series\n",
                "- How to access row Series (index)\n",
                "- The differences between `loc[]` and `iloc[]`\n",
                "- Different ways to start exploring the data general structure\n",
                "- Different ways to access to description statistics\n",
                "- How to look for missing data\n",
                "- How to do data filtering using conditions\n",
                "- How to do sorting\n",
                "- How to do counting\n",
                "- How to group information\n",
                "- How to do aggregation"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "### Facts:\n",
                "- We've only imported pandas!\n",
                "- Almost everything was about accessing and processing the data, and not creating it.\n",
                "\n",
                "\n",
                "### Topics left out maybe for other lectures:\n",
                "- DataFrame operations:\n",
                "  - How to add a column to a DataFrame\n",
                "  - DataFrame inter columns operations\n",
                "  - apply()\n",
                "  - applymap()\n",
                "  - pipe()\n",
                "- Merging DataFrames (merge)\n",
                "- Concatenating DataFrames (concat)\n",
                "- Appending DataFrames, Series or a simple row (append)\n",
                "- Using loops with:\n",
                "  - iterrows()\n",
                "  - itertuples()\n",
                "  - groupby()\n",
                "  \n",
                "### Next lecture\n",
                "- Plotting with PANDAS (showing the importance of plots)\n",
                "- EDA with PANDAS (using Seaborn if possible)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                ""
            ]
        }
    ]
}
